Terminals unused in grammar

    COMP_EQL
    COMP_LT
    COMP_LE
    COMP_GT
    COMP_GE
    LIT_BOOL
    LIT_CHAR
    CTRL_IF
    CTRL_THEN
    CTRL_ELSE
    CTRL_ELIF
    CTRL_END
    CTRL_WHILE
    CTRL_DO
    ERROR


State 30 conflicts: 6 shift/reduce


Grammar

    0 $accept: program $end

    1 program: program declaration
    2        | program assignment
    3        | %empty

    4 declaration: type VAR MISC_SEMI
    5            | type assignment

    6 assignment: VAR ASSIGN expr MISC_SEMI

    7 type: TYPE_INT
    8     | TYPE_CHAR
    9     | TYPE_BOOL

   10 expr: MISC_LP expr MISC_RP
   11     | expr operator expr
   12     | number
   13     | VAR

   14 number: LIT_INT
   15       | LIT_ZERO

   16 operator: OP_ADD
   17         | OP_SUB
   18         | OP_MUL
   19         | OP_DIV
   20         | OP_POT
   21         | OP_MOD


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    OP_ADD (258) 16
    OP_SUB (259) 17
    OP_MUL (260) 18
    OP_DIV (261) 19
    OP_POT (262) 20
    OP_MOD (263) 21
    ASSIGN (264) 6
    COMP_EQL (265)
    COMP_LT (266)
    COMP_LE (267)
    COMP_GT (268)
    COMP_GE (269)
    VAR (270) 4 6 13
    TYPE_INT (271) 7
    TYPE_CHAR (272) 8
    TYPE_BOOL (273) 9
    LIT_INT (274) 14
    LIT_BOOL (275)
    LIT_CHAR (276)
    LIT_ZERO (277) 15
    CTRL_IF (278)
    CTRL_THEN (279)
    CTRL_ELSE (280)
    CTRL_ELIF (281)
    CTRL_END (282)
    CTRL_WHILE (283)
    CTRL_DO (284)
    MISC_LP (285) 10
    MISC_RP (286) 10
    MISC_SEMI (287) 4 6
    ERROR (288)


Nonterminals, with rules where they appear

    $accept (34)
        on left: 0
    program (35)
        on left: 1 2 3
        on right: 0 1 2
    declaration (36)
        on left: 4 5
        on right: 1
    assignment (37)
        on left: 6
        on right: 2 5
    type (38)
        on left: 7 8 9
        on right: 4 5
    expr (39)
        on left: 10 11 12 13
        on right: 6 10 11
    number (40)
        on left: 14 15
        on right: 12
    operator (41)
        on left: 16 17 18 19 20 21
        on right: 11


State 0

    0 $accept: . program $end

    $default  reduce using rule 3 (program)

    program  go to state 1


State 1

    0 $accept: program . $end
    1 program: program . declaration
    2        | program . assignment

    $end       shift, and go to state 2
    VAR        shift, and go to state 3
    TYPE_INT   shift, and go to state 4
    TYPE_CHAR  shift, and go to state 5
    TYPE_BOOL  shift, and go to state 6

    declaration  go to state 7
    assignment   go to state 8
    type         go to state 9


State 2

    0 $accept: program $end .

    $default  accept


State 3

    6 assignment: VAR . ASSIGN expr MISC_SEMI

    ASSIGN  shift, and go to state 10


State 4

    7 type: TYPE_INT .

    $default  reduce using rule 7 (type)


State 5

    8 type: TYPE_CHAR .

    $default  reduce using rule 8 (type)


State 6

    9 type: TYPE_BOOL .

    $default  reduce using rule 9 (type)


State 7

    1 program: program declaration .

    $default  reduce using rule 1 (program)


State 8

    2 program: program assignment .

    $default  reduce using rule 2 (program)


State 9

    4 declaration: type . VAR MISC_SEMI
    5            | type . assignment

    VAR  shift, and go to state 11

    assignment  go to state 12


State 10

    6 assignment: VAR ASSIGN . expr MISC_SEMI

    VAR       shift, and go to state 13
    LIT_INT   shift, and go to state 14
    LIT_ZERO  shift, and go to state 15
    MISC_LP   shift, and go to state 16

    expr    go to state 17
    number  go to state 18


State 11

    4 declaration: type VAR . MISC_SEMI
    6 assignment: VAR . ASSIGN expr MISC_SEMI

    ASSIGN     shift, and go to state 10
    MISC_SEMI  shift, and go to state 19


State 12

    5 declaration: type assignment .

    $default  reduce using rule 5 (declaration)


State 13

   13 expr: VAR .

    $default  reduce using rule 13 (expr)


State 14

   14 number: LIT_INT .

    $default  reduce using rule 14 (number)


State 15

   15 number: LIT_ZERO .

    $default  reduce using rule 15 (number)


State 16

   10 expr: MISC_LP . expr MISC_RP

    VAR       shift, and go to state 13
    LIT_INT   shift, and go to state 14
    LIT_ZERO  shift, and go to state 15
    MISC_LP   shift, and go to state 16

    expr    go to state 20
    number  go to state 18


State 17

    6 assignment: VAR ASSIGN expr . MISC_SEMI
   11 expr: expr . operator expr

    OP_ADD     shift, and go to state 21
    OP_SUB     shift, and go to state 22
    OP_MUL     shift, and go to state 23
    OP_DIV     shift, and go to state 24
    OP_POT     shift, and go to state 25
    OP_MOD     shift, and go to state 26
    MISC_SEMI  shift, and go to state 27

    operator  go to state 28


State 18

   12 expr: number .

    $default  reduce using rule 12 (expr)


State 19

    4 declaration: type VAR MISC_SEMI .

    $default  reduce using rule 4 (declaration)


State 20

   10 expr: MISC_LP expr . MISC_RP
   11     | expr . operator expr

    OP_ADD   shift, and go to state 21
    OP_SUB   shift, and go to state 22
    OP_MUL   shift, and go to state 23
    OP_DIV   shift, and go to state 24
    OP_POT   shift, and go to state 25
    OP_MOD   shift, and go to state 26
    MISC_RP  shift, and go to state 29

    operator  go to state 28


State 21

   16 operator: OP_ADD .

    $default  reduce using rule 16 (operator)


State 22

   17 operator: OP_SUB .

    $default  reduce using rule 17 (operator)


State 23

   18 operator: OP_MUL .

    $default  reduce using rule 18 (operator)


State 24

   19 operator: OP_DIV .

    $default  reduce using rule 19 (operator)


State 25

   20 operator: OP_POT .

    $default  reduce using rule 20 (operator)


State 26

   21 operator: OP_MOD .

    $default  reduce using rule 21 (operator)


State 27

    6 assignment: VAR ASSIGN expr MISC_SEMI .

    $default  reduce using rule 6 (assignment)


State 28

   11 expr: expr operator . expr

    VAR       shift, and go to state 13
    LIT_INT   shift, and go to state 14
    LIT_ZERO  shift, and go to state 15
    MISC_LP   shift, and go to state 16

    expr    go to state 30
    number  go to state 18


State 29

   10 expr: MISC_LP expr MISC_RP .

    $default  reduce using rule 10 (expr)


State 30

   11 expr: expr . operator expr
   11     | expr operator expr .

    OP_ADD  shift, and go to state 21
    OP_SUB  shift, and go to state 22
    OP_MUL  shift, and go to state 23
    OP_DIV  shift, and go to state 24
    OP_POT  shift, and go to state 25
    OP_MOD  shift, and go to state 26

    OP_ADD    [reduce using rule 11 (expr)]
    OP_SUB    [reduce using rule 11 (expr)]
    OP_MUL    [reduce using rule 11 (expr)]
    OP_DIV    [reduce using rule 11 (expr)]
    OP_POT    [reduce using rule 11 (expr)]
    OP_MOD    [reduce using rule 11 (expr)]
    $default  reduce using rule 11 (expr)

    operator  go to state 28
