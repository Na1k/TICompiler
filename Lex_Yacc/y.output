Terminals unused in grammar

    LOGIC_NOT
    ERROR


Grammar

    0 $accept: program $end

    1 program: program declaration
    2        | program assignment
    3        | program controlBlock
    4        | %empty

    5 declaration: type VAR MISC_SEMI
    6            | type assignment

    7 assignment: VAR ASSIGN exprlvl_1 MISC_SEMI
    8           | VAR ASSIGN LIT_CHAR MISC_SEMI

    9 type: TYPE_INT
   10     | TYPE_CHAR
   11     | TYPE_BOOL

   12 exprlvl_1: exprlvl_1 logicOperator exprlvl_2
   13          | exprlvl_2

   14 exprlvl_2: exprlvl_2 lineOperator exprlvl_3
   15          | exprlvl_3

   16 exprlvl_3: exprlvl_3 pointOperator exprlvl_4
   17          | exprlvl_4

   18 exprlvl_4: exprlvl_4 potOperator literal
   19          | literal

   20 literal: MISC_LP exprlvl_1 MISC_RP
   21        | LIT_BOOL
   22        | number
   23        | VAR

   24 number: LIT_INT
   25       | LIT_ZERO
   26       | OP_SUB LIT_INT

   27 lineOperator: OP_ADD
   28             | OP_SUB

   29 pointOperator: OP_MUL
   30              | OP_DIV
   31              | OP_MOD

   32 potOperator: OP_POT

   33 logicOperator: COMP_EQL
   34              | COMP_LT
   35              | COMP_LE
   36              | COMP_GT
   37              | COMP_GE
   38              | LOGIC_AND
   39              | LOGIC_OR

   40 controlBlock: controlIf
   41             | controlWhile

   42 controlIf: CTRL_IF exprlvl_1 CTRL_THEN program controlElif CTRL_END
   43          | CTRL_IF exprlvl_1 CTRL_THEN program controlElif CTRL_ELSE program CTRL_END

   44 controlElif: CTRL_ELIF exprlvl_1 CTRL_THEN program controlElif
   45            | %empty

   46 controlWhile: CTRL_WHILE exprlvl_1 CTRL_DO program CTRL_END
   47             | CTRL_DO program CTRL_WHILE exprlvl_1 CTRL_END


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    OP_ADD (258) 27
    OP_SUB (259) 26 28
    OP_MUL (260) 29
    OP_DIV (261) 30
    OP_POT (262) 32
    OP_MOD (263) 31
    ASSIGN (264) 7 8
    COMP_EQL (265) 33
    COMP_LT (266) 34
    COMP_LE (267) 35
    COMP_GT (268) 36
    COMP_GE (269) 37
    LOGIC_AND (270) 38
    LOGIC_OR (271) 39
    LOGIC_NOT (272)
    VAR (273) 5 7 8 23
    TYPE_INT (274) 9
    TYPE_CHAR (275) 10
    TYPE_BOOL (276) 11
    LIT_INT <ival> (277) 24 26
    LIT_BOOL (278) 21
    LIT_CHAR <sval> (279) 8
    LIT_ZERO (280) 25
    CTRL_IF (281) 42 43
    CTRL_THEN (282) 42 43 44
    CTRL_ELSE (283) 43
    CTRL_ELIF (284) 44
    CTRL_END (285) 42 43 46 47
    CTRL_WHILE (286) 46 47
    CTRL_DO (287) 46 47
    MISC_LP (288) 20
    MISC_RP (289) 20
    MISC_SEMI (290) 5 7 8
    ERROR (291)


Nonterminals, with rules where they appear

    $accept (37)
        on left: 0
    program (38)
        on left: 1 2 3 4
        on right: 0 1 2 3 42 43 44 46 47
    declaration (39)
        on left: 5 6
        on right: 1
    assignment (40)
        on left: 7 8
        on right: 2 6
    type (41)
        on left: 9 10 11
        on right: 5 6
    exprlvl_1 (42)
        on left: 12 13
        on right: 7 12 20 42 43 44 46 47
    exprlvl_2 (43)
        on left: 14 15
        on right: 12 13 14
    exprlvl_3 (44)
        on left: 16 17
        on right: 14 15 16
    exprlvl_4 (45)
        on left: 18 19
        on right: 16 17 18
    literal (46)
        on left: 20 21 22 23
        on right: 18 19
    number (47)
        on left: 24 25 26
        on right: 22
    lineOperator (48)
        on left: 27 28
        on right: 14
    pointOperator (49)
        on left: 29 30 31
        on right: 16
    potOperator (50)
        on left: 32
        on right: 18
    logicOperator (51)
        on left: 33 34 35 36 37 38 39
        on right: 12
    controlBlock (52)
        on left: 40 41
        on right: 3
    controlIf (53)
        on left: 42 43
        on right: 40
    controlElif (54)
        on left: 44 45
        on right: 42 43 44
    controlWhile (55)
        on left: 46 47
        on right: 41


State 0

    0 $accept: . program $end

    $default  reduce using rule 4 (program)

    program  go to state 1


State 1

    0 $accept: program . $end
    1 program: program . declaration
    2        | program . assignment
    3        | program . controlBlock

    $end        shift, and go to state 2
    VAR         shift, and go to state 3
    TYPE_INT    shift, and go to state 4
    TYPE_CHAR   shift, and go to state 5
    TYPE_BOOL   shift, and go to state 6
    CTRL_IF     shift, and go to state 7
    CTRL_WHILE  shift, and go to state 8
    CTRL_DO     shift, and go to state 9

    declaration   go to state 10
    assignment    go to state 11
    type          go to state 12
    controlBlock  go to state 13
    controlIf     go to state 14
    controlWhile  go to state 15


State 2

    0 $accept: program $end .

    $default  accept


State 3

    7 assignment: VAR . ASSIGN exprlvl_1 MISC_SEMI
    8           | VAR . ASSIGN LIT_CHAR MISC_SEMI

    ASSIGN  shift, and go to state 16


State 4

    9 type: TYPE_INT .

    $default  reduce using rule 9 (type)


State 5

   10 type: TYPE_CHAR .

    $default  reduce using rule 10 (type)


State 6

   11 type: TYPE_BOOL .

    $default  reduce using rule 11 (type)


State 7

   42 controlIf: CTRL_IF . exprlvl_1 CTRL_THEN program controlElif CTRL_END
   43          | CTRL_IF . exprlvl_1 CTRL_THEN program controlElif CTRL_ELSE program CTRL_END

    OP_SUB    shift, and go to state 17
    VAR       shift, and go to state 18
    LIT_INT   shift, and go to state 19
    LIT_BOOL  shift, and go to state 20
    LIT_ZERO  shift, and go to state 21
    MISC_LP   shift, and go to state 22

    exprlvl_1  go to state 23
    exprlvl_2  go to state 24
    exprlvl_3  go to state 25
    exprlvl_4  go to state 26
    literal    go to state 27
    number     go to state 28


State 8

   46 controlWhile: CTRL_WHILE . exprlvl_1 CTRL_DO program CTRL_END

    OP_SUB    shift, and go to state 17
    VAR       shift, and go to state 18
    LIT_INT   shift, and go to state 19
    LIT_BOOL  shift, and go to state 20
    LIT_ZERO  shift, and go to state 21
    MISC_LP   shift, and go to state 22

    exprlvl_1  go to state 29
    exprlvl_2  go to state 24
    exprlvl_3  go to state 25
    exprlvl_4  go to state 26
    literal    go to state 27
    number     go to state 28


State 9

   47 controlWhile: CTRL_DO . program CTRL_WHILE exprlvl_1 CTRL_END

    $default  reduce using rule 4 (program)

    program  go to state 30


State 10

    1 program: program declaration .

    $default  reduce using rule 1 (program)


State 11

    2 program: program assignment .

    $default  reduce using rule 2 (program)


State 12

    5 declaration: type . VAR MISC_SEMI
    6            | type . assignment

    VAR  shift, and go to state 31

    assignment  go to state 32


State 13

    3 program: program controlBlock .

    $default  reduce using rule 3 (program)


State 14

   40 controlBlock: controlIf .

    $default  reduce using rule 40 (controlBlock)


State 15

   41 controlBlock: controlWhile .

    $default  reduce using rule 41 (controlBlock)


State 16

    7 assignment: VAR ASSIGN . exprlvl_1 MISC_SEMI
    8           | VAR ASSIGN . LIT_CHAR MISC_SEMI

    OP_SUB    shift, and go to state 17
    VAR       shift, and go to state 18
    LIT_INT   shift, and go to state 19
    LIT_BOOL  shift, and go to state 20
    LIT_CHAR  shift, and go to state 33
    LIT_ZERO  shift, and go to state 21
    MISC_LP   shift, and go to state 22

    exprlvl_1  go to state 34
    exprlvl_2  go to state 24
    exprlvl_3  go to state 25
    exprlvl_4  go to state 26
    literal    go to state 27
    number     go to state 28


State 17

   26 number: OP_SUB . LIT_INT

    LIT_INT  shift, and go to state 35


State 18

   23 literal: VAR .

    $default  reduce using rule 23 (literal)


State 19

   24 number: LIT_INT .

    $default  reduce using rule 24 (number)


State 20

   21 literal: LIT_BOOL .

    $default  reduce using rule 21 (literal)


State 21

   25 number: LIT_ZERO .

    $default  reduce using rule 25 (number)


State 22

   20 literal: MISC_LP . exprlvl_1 MISC_RP

    OP_SUB    shift, and go to state 17
    VAR       shift, and go to state 18
    LIT_INT   shift, and go to state 19
    LIT_BOOL  shift, and go to state 20
    LIT_ZERO  shift, and go to state 21
    MISC_LP   shift, and go to state 22

    exprlvl_1  go to state 36
    exprlvl_2  go to state 24
    exprlvl_3  go to state 25
    exprlvl_4  go to state 26
    literal    go to state 27
    number     go to state 28


State 23

   12 exprlvl_1: exprlvl_1 . logicOperator exprlvl_2
   42 controlIf: CTRL_IF exprlvl_1 . CTRL_THEN program controlElif CTRL_END
   43          | CTRL_IF exprlvl_1 . CTRL_THEN program controlElif CTRL_ELSE program CTRL_END

    COMP_EQL   shift, and go to state 37
    COMP_LT    shift, and go to state 38
    COMP_LE    shift, and go to state 39
    COMP_GT    shift, and go to state 40
    COMP_GE    shift, and go to state 41
    LOGIC_AND  shift, and go to state 42
    LOGIC_OR   shift, and go to state 43
    CTRL_THEN  shift, and go to state 44

    logicOperator  go to state 45


State 24

   13 exprlvl_1: exprlvl_2 .
   14 exprlvl_2: exprlvl_2 . lineOperator exprlvl_3

    OP_ADD  shift, and go to state 46
    OP_SUB  shift, and go to state 47

    $default  reduce using rule 13 (exprlvl_1)

    lineOperator  go to state 48


State 25

   15 exprlvl_2: exprlvl_3 .
   16 exprlvl_3: exprlvl_3 . pointOperator exprlvl_4

    OP_MUL  shift, and go to state 49
    OP_DIV  shift, and go to state 50
    OP_MOD  shift, and go to state 51

    $default  reduce using rule 15 (exprlvl_2)

    pointOperator  go to state 52


State 26

   17 exprlvl_3: exprlvl_4 .
   18 exprlvl_4: exprlvl_4 . potOperator literal

    OP_POT  shift, and go to state 53

    $default  reduce using rule 17 (exprlvl_3)

    potOperator  go to state 54


State 27

   19 exprlvl_4: literal .

    $default  reduce using rule 19 (exprlvl_4)


State 28

   22 literal: number .

    $default  reduce using rule 22 (literal)


State 29

   12 exprlvl_1: exprlvl_1 . logicOperator exprlvl_2
   46 controlWhile: CTRL_WHILE exprlvl_1 . CTRL_DO program CTRL_END

    COMP_EQL   shift, and go to state 37
    COMP_LT    shift, and go to state 38
    COMP_LE    shift, and go to state 39
    COMP_GT    shift, and go to state 40
    COMP_GE    shift, and go to state 41
    LOGIC_AND  shift, and go to state 42
    LOGIC_OR   shift, and go to state 43
    CTRL_DO    shift, and go to state 55

    logicOperator  go to state 45


State 30

    1 program: program . declaration
    2        | program . assignment
    3        | program . controlBlock
   47 controlWhile: CTRL_DO program . CTRL_WHILE exprlvl_1 CTRL_END

    VAR         shift, and go to state 3
    TYPE_INT    shift, and go to state 4
    TYPE_CHAR   shift, and go to state 5
    TYPE_BOOL   shift, and go to state 6
    CTRL_IF     shift, and go to state 7
    CTRL_WHILE  shift, and go to state 56
    CTRL_DO     shift, and go to state 9

    declaration   go to state 10
    assignment    go to state 11
    type          go to state 12
    controlBlock  go to state 13
    controlIf     go to state 14
    controlWhile  go to state 15


State 31

    5 declaration: type VAR . MISC_SEMI
    7 assignment: VAR . ASSIGN exprlvl_1 MISC_SEMI
    8           | VAR . ASSIGN LIT_CHAR MISC_SEMI

    ASSIGN     shift, and go to state 16
    MISC_SEMI  shift, and go to state 57


State 32

    6 declaration: type assignment .

    $default  reduce using rule 6 (declaration)


State 33

    8 assignment: VAR ASSIGN LIT_CHAR . MISC_SEMI

    MISC_SEMI  shift, and go to state 58


State 34

    7 assignment: VAR ASSIGN exprlvl_1 . MISC_SEMI
   12 exprlvl_1: exprlvl_1 . logicOperator exprlvl_2

    COMP_EQL   shift, and go to state 37
    COMP_LT    shift, and go to state 38
    COMP_LE    shift, and go to state 39
    COMP_GT    shift, and go to state 40
    COMP_GE    shift, and go to state 41
    LOGIC_AND  shift, and go to state 42
    LOGIC_OR   shift, and go to state 43
    MISC_SEMI  shift, and go to state 59

    logicOperator  go to state 45


State 35

   26 number: OP_SUB LIT_INT .

    $default  reduce using rule 26 (number)


State 36

   12 exprlvl_1: exprlvl_1 . logicOperator exprlvl_2
   20 literal: MISC_LP exprlvl_1 . MISC_RP

    COMP_EQL   shift, and go to state 37
    COMP_LT    shift, and go to state 38
    COMP_LE    shift, and go to state 39
    COMP_GT    shift, and go to state 40
    COMP_GE    shift, and go to state 41
    LOGIC_AND  shift, and go to state 42
    LOGIC_OR   shift, and go to state 43
    MISC_RP    shift, and go to state 60

    logicOperator  go to state 45


State 37

   33 logicOperator: COMP_EQL .

    $default  reduce using rule 33 (logicOperator)


State 38

   34 logicOperator: COMP_LT .

    $default  reduce using rule 34 (logicOperator)


State 39

   35 logicOperator: COMP_LE .

    $default  reduce using rule 35 (logicOperator)


State 40

   36 logicOperator: COMP_GT .

    $default  reduce using rule 36 (logicOperator)


State 41

   37 logicOperator: COMP_GE .

    $default  reduce using rule 37 (logicOperator)


State 42

   38 logicOperator: LOGIC_AND .

    $default  reduce using rule 38 (logicOperator)


State 43

   39 logicOperator: LOGIC_OR .

    $default  reduce using rule 39 (logicOperator)


State 44

   42 controlIf: CTRL_IF exprlvl_1 CTRL_THEN . program controlElif CTRL_END
   43          | CTRL_IF exprlvl_1 CTRL_THEN . program controlElif CTRL_ELSE program CTRL_END

    $default  reduce using rule 4 (program)

    program  go to state 61


State 45

   12 exprlvl_1: exprlvl_1 logicOperator . exprlvl_2

    OP_SUB    shift, and go to state 17
    VAR       shift, and go to state 18
    LIT_INT   shift, and go to state 19
    LIT_BOOL  shift, and go to state 20
    LIT_ZERO  shift, and go to state 21
    MISC_LP   shift, and go to state 22

    exprlvl_2  go to state 62
    exprlvl_3  go to state 25
    exprlvl_4  go to state 26
    literal    go to state 27
    number     go to state 28


State 46

   27 lineOperator: OP_ADD .

    $default  reduce using rule 27 (lineOperator)


State 47

   28 lineOperator: OP_SUB .

    $default  reduce using rule 28 (lineOperator)


State 48

   14 exprlvl_2: exprlvl_2 lineOperator . exprlvl_3

    OP_SUB    shift, and go to state 17
    VAR       shift, and go to state 18
    LIT_INT   shift, and go to state 19
    LIT_BOOL  shift, and go to state 20
    LIT_ZERO  shift, and go to state 21
    MISC_LP   shift, and go to state 22

    exprlvl_3  go to state 63
    exprlvl_4  go to state 26
    literal    go to state 27
    number     go to state 28


State 49

   29 pointOperator: OP_MUL .

    $default  reduce using rule 29 (pointOperator)


State 50

   30 pointOperator: OP_DIV .

    $default  reduce using rule 30 (pointOperator)


State 51

   31 pointOperator: OP_MOD .

    $default  reduce using rule 31 (pointOperator)


State 52

   16 exprlvl_3: exprlvl_3 pointOperator . exprlvl_4

    OP_SUB    shift, and go to state 17
    VAR       shift, and go to state 18
    LIT_INT   shift, and go to state 19
    LIT_BOOL  shift, and go to state 20
    LIT_ZERO  shift, and go to state 21
    MISC_LP   shift, and go to state 22

    exprlvl_4  go to state 64
    literal    go to state 27
    number     go to state 28


State 53

   32 potOperator: OP_POT .

    $default  reduce using rule 32 (potOperator)


State 54

   18 exprlvl_4: exprlvl_4 potOperator . literal

    OP_SUB    shift, and go to state 17
    VAR       shift, and go to state 18
    LIT_INT   shift, and go to state 19
    LIT_BOOL  shift, and go to state 20
    LIT_ZERO  shift, and go to state 21
    MISC_LP   shift, and go to state 22

    literal  go to state 65
    number   go to state 28


State 55

   46 controlWhile: CTRL_WHILE exprlvl_1 CTRL_DO . program CTRL_END

    $default  reduce using rule 4 (program)

    program  go to state 66


State 56

   46 controlWhile: CTRL_WHILE . exprlvl_1 CTRL_DO program CTRL_END
   47             | CTRL_DO program CTRL_WHILE . exprlvl_1 CTRL_END

    OP_SUB    shift, and go to state 17
    VAR       shift, and go to state 18
    LIT_INT   shift, and go to state 19
    LIT_BOOL  shift, and go to state 20
    LIT_ZERO  shift, and go to state 21
    MISC_LP   shift, and go to state 22

    exprlvl_1  go to state 67
    exprlvl_2  go to state 24
    exprlvl_3  go to state 25
    exprlvl_4  go to state 26
    literal    go to state 27
    number     go to state 28


State 57

    5 declaration: type VAR MISC_SEMI .

    $default  reduce using rule 5 (declaration)


State 58

    8 assignment: VAR ASSIGN LIT_CHAR MISC_SEMI .

    $default  reduce using rule 8 (assignment)


State 59

    7 assignment: VAR ASSIGN exprlvl_1 MISC_SEMI .

    $default  reduce using rule 7 (assignment)


State 60

   20 literal: MISC_LP exprlvl_1 MISC_RP .

    $default  reduce using rule 20 (literal)


State 61

    1 program: program . declaration
    2        | program . assignment
    3        | program . controlBlock
   42 controlIf: CTRL_IF exprlvl_1 CTRL_THEN program . controlElif CTRL_END
   43          | CTRL_IF exprlvl_1 CTRL_THEN program . controlElif CTRL_ELSE program CTRL_END

    VAR         shift, and go to state 3
    TYPE_INT    shift, and go to state 4
    TYPE_CHAR   shift, and go to state 5
    TYPE_BOOL   shift, and go to state 6
    CTRL_IF     shift, and go to state 7
    CTRL_ELIF   shift, and go to state 68
    CTRL_WHILE  shift, and go to state 8
    CTRL_DO     shift, and go to state 9

    $default  reduce using rule 45 (controlElif)

    declaration   go to state 10
    assignment    go to state 11
    type          go to state 12
    controlBlock  go to state 13
    controlIf     go to state 14
    controlElif   go to state 69
    controlWhile  go to state 15


State 62

   12 exprlvl_1: exprlvl_1 logicOperator exprlvl_2 .
   14 exprlvl_2: exprlvl_2 . lineOperator exprlvl_3

    OP_ADD  shift, and go to state 46
    OP_SUB  shift, and go to state 47

    $default  reduce using rule 12 (exprlvl_1)

    lineOperator  go to state 48


State 63

   14 exprlvl_2: exprlvl_2 lineOperator exprlvl_3 .
   16 exprlvl_3: exprlvl_3 . pointOperator exprlvl_4

    OP_MUL  shift, and go to state 49
    OP_DIV  shift, and go to state 50
    OP_MOD  shift, and go to state 51

    $default  reduce using rule 14 (exprlvl_2)

    pointOperator  go to state 52


State 64

   16 exprlvl_3: exprlvl_3 pointOperator exprlvl_4 .
   18 exprlvl_4: exprlvl_4 . potOperator literal

    OP_POT  shift, and go to state 53

    $default  reduce using rule 16 (exprlvl_3)

    potOperator  go to state 54


State 65

   18 exprlvl_4: exprlvl_4 potOperator literal .

    $default  reduce using rule 18 (exprlvl_4)


State 66

    1 program: program . declaration
    2        | program . assignment
    3        | program . controlBlock
   46 controlWhile: CTRL_WHILE exprlvl_1 CTRL_DO program . CTRL_END

    VAR         shift, and go to state 3
    TYPE_INT    shift, and go to state 4
    TYPE_CHAR   shift, and go to state 5
    TYPE_BOOL   shift, and go to state 6
    CTRL_IF     shift, and go to state 7
    CTRL_END    shift, and go to state 70
    CTRL_WHILE  shift, and go to state 8
    CTRL_DO     shift, and go to state 9

    declaration   go to state 10
    assignment    go to state 11
    type          go to state 12
    controlBlock  go to state 13
    controlIf     go to state 14
    controlWhile  go to state 15


State 67

   12 exprlvl_1: exprlvl_1 . logicOperator exprlvl_2
   46 controlWhile: CTRL_WHILE exprlvl_1 . CTRL_DO program CTRL_END
   47             | CTRL_DO program CTRL_WHILE exprlvl_1 . CTRL_END

    COMP_EQL   shift, and go to state 37
    COMP_LT    shift, and go to state 38
    COMP_LE    shift, and go to state 39
    COMP_GT    shift, and go to state 40
    COMP_GE    shift, and go to state 41
    LOGIC_AND  shift, and go to state 42
    LOGIC_OR   shift, and go to state 43
    CTRL_END   shift, and go to state 71
    CTRL_DO    shift, and go to state 55

    logicOperator  go to state 45


State 68

   44 controlElif: CTRL_ELIF . exprlvl_1 CTRL_THEN program controlElif

    OP_SUB    shift, and go to state 17
    VAR       shift, and go to state 18
    LIT_INT   shift, and go to state 19
    LIT_BOOL  shift, and go to state 20
    LIT_ZERO  shift, and go to state 21
    MISC_LP   shift, and go to state 22

    exprlvl_1  go to state 72
    exprlvl_2  go to state 24
    exprlvl_3  go to state 25
    exprlvl_4  go to state 26
    literal    go to state 27
    number     go to state 28


State 69

   42 controlIf: CTRL_IF exprlvl_1 CTRL_THEN program controlElif . CTRL_END
   43          | CTRL_IF exprlvl_1 CTRL_THEN program controlElif . CTRL_ELSE program CTRL_END

    CTRL_ELSE  shift, and go to state 73
    CTRL_END   shift, and go to state 74


State 70

   46 controlWhile: CTRL_WHILE exprlvl_1 CTRL_DO program CTRL_END .

    $default  reduce using rule 46 (controlWhile)


State 71

   47 controlWhile: CTRL_DO program CTRL_WHILE exprlvl_1 CTRL_END .

    $default  reduce using rule 47 (controlWhile)


State 72

   12 exprlvl_1: exprlvl_1 . logicOperator exprlvl_2
   44 controlElif: CTRL_ELIF exprlvl_1 . CTRL_THEN program controlElif

    COMP_EQL   shift, and go to state 37
    COMP_LT    shift, and go to state 38
    COMP_LE    shift, and go to state 39
    COMP_GT    shift, and go to state 40
    COMP_GE    shift, and go to state 41
    LOGIC_AND  shift, and go to state 42
    LOGIC_OR   shift, and go to state 43
    CTRL_THEN  shift, and go to state 75

    logicOperator  go to state 45


State 73

   43 controlIf: CTRL_IF exprlvl_1 CTRL_THEN program controlElif CTRL_ELSE . program CTRL_END

    $default  reduce using rule 4 (program)

    program  go to state 76


State 74

   42 controlIf: CTRL_IF exprlvl_1 CTRL_THEN program controlElif CTRL_END .

    $default  reduce using rule 42 (controlIf)


State 75

   44 controlElif: CTRL_ELIF exprlvl_1 CTRL_THEN . program controlElif

    $default  reduce using rule 4 (program)

    program  go to state 77


State 76

    1 program: program . declaration
    2        | program . assignment
    3        | program . controlBlock
   43 controlIf: CTRL_IF exprlvl_1 CTRL_THEN program controlElif CTRL_ELSE program . CTRL_END

    VAR         shift, and go to state 3
    TYPE_INT    shift, and go to state 4
    TYPE_CHAR   shift, and go to state 5
    TYPE_BOOL   shift, and go to state 6
    CTRL_IF     shift, and go to state 7
    CTRL_END    shift, and go to state 78
    CTRL_WHILE  shift, and go to state 8
    CTRL_DO     shift, and go to state 9

    declaration   go to state 10
    assignment    go to state 11
    type          go to state 12
    controlBlock  go to state 13
    controlIf     go to state 14
    controlWhile  go to state 15


State 77

    1 program: program . declaration
    2        | program . assignment
    3        | program . controlBlock
   44 controlElif: CTRL_ELIF exprlvl_1 CTRL_THEN program . controlElif

    VAR         shift, and go to state 3
    TYPE_INT    shift, and go to state 4
    TYPE_CHAR   shift, and go to state 5
    TYPE_BOOL   shift, and go to state 6
    CTRL_IF     shift, and go to state 7
    CTRL_ELIF   shift, and go to state 68
    CTRL_WHILE  shift, and go to state 8
    CTRL_DO     shift, and go to state 9

    $default  reduce using rule 45 (controlElif)

    declaration   go to state 10
    assignment    go to state 11
    type          go to state 12
    controlBlock  go to state 13
    controlIf     go to state 14
    controlElif   go to state 79
    controlWhile  go to state 15


State 78

   43 controlIf: CTRL_IF exprlvl_1 CTRL_THEN program controlElif CTRL_ELSE program CTRL_END .

    $default  reduce using rule 43 (controlIf)


State 79

   44 controlElif: CTRL_ELIF exprlvl_1 CTRL_THEN program controlElif .

    $default  reduce using rule 44 (controlElif)
