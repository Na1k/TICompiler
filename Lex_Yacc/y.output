Terminals unused in grammar

    LOGIC_NOT
    LIT_CHAR
    CTRL_IF
    CTRL_THEN
    CTRL_ELSE
    CTRL_ELIF
    CTRL_END
    CTRL_WHILE
    CTRL_DO
    ERROR


Grammar

    0 $accept: program $end

    1 program: program declaration
    2        | program assignment
    3        | program logicExpr
    4        | %empty

    5 declaration: type VAR MISC_SEMI
    6            | type assignment

    7 assignment: VAR ASSIGN expr MISC_SEMI

    8 type: TYPE_INT
    9     | TYPE_CHAR
   10     | TYPE_BOOL

   11 expr: expr lineOperator term
   12     | term

   13 term: term pointOperator factor
   14     | factor

   15 factor: MISC_LP expr MISC_RP
   16       | number
   17       | VAR

   18 number: LIT_INT
   19       | LIT_ZERO
   20       | OP_SUB LIT_INT

   21 lineOperator: OP_ADD
   22             | OP_SUB

   23 pointOperator: OP_MUL
   24              | OP_DIV
   25              | OP_POT
   26              | OP_MOD

   27 logicExpr: logicExpr logicOperator logicTerm
   28          | logicTerm

   29 logicTerm: MISC_LP logicExpr MISC_RP
   30          | VAR
   31          | number
   32          | LIT_BOOL

   33 logicOperator: COMP_EQL
   34              | COMP_LT
   35              | COMP_LE
   36              | COMP_GT
   37              | COMP_GE
   38              | LOGIC_AND
   39              | LOGIC_OR


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    OP_ADD (258) 21
    OP_SUB (259) 20 22
    OP_MUL (260) 23
    OP_DIV (261) 24
    OP_POT (262) 25
    OP_MOD (263) 26
    ASSIGN (264) 7
    COMP_EQL (265) 33
    COMP_LT (266) 34
    COMP_LE (267) 35
    COMP_GT (268) 36
    COMP_GE (269) 37
    LOGIC_AND (270) 38
    LOGIC_OR (271) 39
    LOGIC_NOT (272)
    VAR (273) 5 7 17 30
    TYPE_INT (274) 8
    TYPE_CHAR (275) 9
    TYPE_BOOL (276) 10
    LIT_INT (277) 18 20
    LIT_BOOL (278) 32
    LIT_CHAR (279)
    LIT_ZERO (280) 19
    CTRL_IF (281)
    CTRL_THEN (282)
    CTRL_ELSE (283)
    CTRL_ELIF (284)
    CTRL_END (285)
    CTRL_WHILE (286)
    CTRL_DO (287)
    MISC_LP (288) 15 29
    MISC_RP (289) 15 29
    MISC_SEMI (290) 5 7
    ERROR (291)


Nonterminals, with rules where they appear

    $accept (37)
        on left: 0
    program (38)
        on left: 1 2 3 4
        on right: 0 1 2 3
    declaration (39)
        on left: 5 6
        on right: 1
    assignment (40)
        on left: 7
        on right: 2 6
    type (41)
        on left: 8 9 10
        on right: 5 6
    expr (42)
        on left: 11 12
        on right: 7 11 15
    term (43)
        on left: 13 14
        on right: 11 12 13
    factor (44)
        on left: 15 16 17
        on right: 13 14
    number (45)
        on left: 18 19 20
        on right: 16 31
    lineOperator (46)
        on left: 21 22
        on right: 11
    pointOperator (47)
        on left: 23 24 25 26
        on right: 13
    logicExpr (48)
        on left: 27 28
        on right: 3 27 29
    logicTerm (49)
        on left: 29 30 31 32
        on right: 27 28
    logicOperator (50)
        on left: 33 34 35 36 37 38 39
        on right: 27


State 0

    0 $accept: . program $end

    $default  reduce using rule 4 (program)

    program  go to state 1


State 1

    0 $accept: program . $end
    1 program: program . declaration
    2        | program . assignment
    3        | program . logicExpr

    $end       shift, and go to state 2
    OP_SUB     shift, and go to state 3
    VAR        shift, and go to state 4
    TYPE_INT   shift, and go to state 5
    TYPE_CHAR  shift, and go to state 6
    TYPE_BOOL  shift, and go to state 7
    LIT_INT    shift, and go to state 8
    LIT_BOOL   shift, and go to state 9
    LIT_ZERO   shift, and go to state 10
    MISC_LP    shift, and go to state 11

    declaration  go to state 12
    assignment   go to state 13
    type         go to state 14
    number       go to state 15
    logicExpr    go to state 16
    logicTerm    go to state 17


State 2

    0 $accept: program $end .

    $default  accept


State 3

   20 number: OP_SUB . LIT_INT

    LIT_INT  shift, and go to state 18


State 4

    7 assignment: VAR . ASSIGN expr MISC_SEMI
   30 logicTerm: VAR .

    ASSIGN  shift, and go to state 19

    $default  reduce using rule 30 (logicTerm)


State 5

    8 type: TYPE_INT .

    $default  reduce using rule 8 (type)


State 6

    9 type: TYPE_CHAR .

    $default  reduce using rule 9 (type)


State 7

   10 type: TYPE_BOOL .

    $default  reduce using rule 10 (type)


State 8

   18 number: LIT_INT .

    $default  reduce using rule 18 (number)


State 9

   32 logicTerm: LIT_BOOL .

    $default  reduce using rule 32 (logicTerm)


State 10

   19 number: LIT_ZERO .

    $default  reduce using rule 19 (number)


State 11

   29 logicTerm: MISC_LP . logicExpr MISC_RP

    OP_SUB    shift, and go to state 3
    VAR       shift, and go to state 20
    LIT_INT   shift, and go to state 8
    LIT_BOOL  shift, and go to state 9
    LIT_ZERO  shift, and go to state 10
    MISC_LP   shift, and go to state 11

    number     go to state 15
    logicExpr  go to state 21
    logicTerm  go to state 17


State 12

    1 program: program declaration .

    $default  reduce using rule 1 (program)


State 13

    2 program: program assignment .

    $default  reduce using rule 2 (program)


State 14

    5 declaration: type . VAR MISC_SEMI
    6            | type . assignment

    VAR  shift, and go to state 22

    assignment  go to state 23


State 15

   31 logicTerm: number .

    $default  reduce using rule 31 (logicTerm)


State 16

    3 program: program logicExpr .
   27 logicExpr: logicExpr . logicOperator logicTerm

    COMP_EQL   shift, and go to state 24
    COMP_LT    shift, and go to state 25
    COMP_LE    shift, and go to state 26
    COMP_GT    shift, and go to state 27
    COMP_GE    shift, and go to state 28
    LOGIC_AND  shift, and go to state 29
    LOGIC_OR   shift, and go to state 30

    $default  reduce using rule 3 (program)

    logicOperator  go to state 31


State 17

   28 logicExpr: logicTerm .

    $default  reduce using rule 28 (logicExpr)


State 18

   20 number: OP_SUB LIT_INT .

    $default  reduce using rule 20 (number)


State 19

    7 assignment: VAR ASSIGN . expr MISC_SEMI

    OP_SUB    shift, and go to state 3
    VAR       shift, and go to state 32
    LIT_INT   shift, and go to state 8
    LIT_ZERO  shift, and go to state 10
    MISC_LP   shift, and go to state 33

    expr    go to state 34
    term    go to state 35
    factor  go to state 36
    number  go to state 37


State 20

   30 logicTerm: VAR .

    $default  reduce using rule 30 (logicTerm)


State 21

   27 logicExpr: logicExpr . logicOperator logicTerm
   29 logicTerm: MISC_LP logicExpr . MISC_RP

    COMP_EQL   shift, and go to state 24
    COMP_LT    shift, and go to state 25
    COMP_LE    shift, and go to state 26
    COMP_GT    shift, and go to state 27
    COMP_GE    shift, and go to state 28
    LOGIC_AND  shift, and go to state 29
    LOGIC_OR   shift, and go to state 30
    MISC_RP    shift, and go to state 38

    logicOperator  go to state 31


State 22

    5 declaration: type VAR . MISC_SEMI
    7 assignment: VAR . ASSIGN expr MISC_SEMI

    ASSIGN     shift, and go to state 19
    MISC_SEMI  shift, and go to state 39


State 23

    6 declaration: type assignment .

    $default  reduce using rule 6 (declaration)


State 24

   33 logicOperator: COMP_EQL .

    $default  reduce using rule 33 (logicOperator)


State 25

   34 logicOperator: COMP_LT .

    $default  reduce using rule 34 (logicOperator)


State 26

   35 logicOperator: COMP_LE .

    $default  reduce using rule 35 (logicOperator)


State 27

   36 logicOperator: COMP_GT .

    $default  reduce using rule 36 (logicOperator)


State 28

   37 logicOperator: COMP_GE .

    $default  reduce using rule 37 (logicOperator)


State 29

   38 logicOperator: LOGIC_AND .

    $default  reduce using rule 38 (logicOperator)


State 30

   39 logicOperator: LOGIC_OR .

    $default  reduce using rule 39 (logicOperator)


State 31

   27 logicExpr: logicExpr logicOperator . logicTerm

    OP_SUB    shift, and go to state 3
    VAR       shift, and go to state 20
    LIT_INT   shift, and go to state 8
    LIT_BOOL  shift, and go to state 9
    LIT_ZERO  shift, and go to state 10
    MISC_LP   shift, and go to state 11

    number     go to state 15
    logicTerm  go to state 40


State 32

   17 factor: VAR .

    $default  reduce using rule 17 (factor)


State 33

   15 factor: MISC_LP . expr MISC_RP

    OP_SUB    shift, and go to state 3
    VAR       shift, and go to state 32
    LIT_INT   shift, and go to state 8
    LIT_ZERO  shift, and go to state 10
    MISC_LP   shift, and go to state 33

    expr    go to state 41
    term    go to state 35
    factor  go to state 36
    number  go to state 37


State 34

    7 assignment: VAR ASSIGN expr . MISC_SEMI
   11 expr: expr . lineOperator term

    OP_ADD     shift, and go to state 42
    OP_SUB     shift, and go to state 43
    MISC_SEMI  shift, and go to state 44

    lineOperator  go to state 45


State 35

   12 expr: term .
   13 term: term . pointOperator factor

    OP_MUL  shift, and go to state 46
    OP_DIV  shift, and go to state 47
    OP_POT  shift, and go to state 48
    OP_MOD  shift, and go to state 49

    $default  reduce using rule 12 (expr)

    pointOperator  go to state 50


State 36

   14 term: factor .

    $default  reduce using rule 14 (term)


State 37

   16 factor: number .

    $default  reduce using rule 16 (factor)


State 38

   29 logicTerm: MISC_LP logicExpr MISC_RP .

    $default  reduce using rule 29 (logicTerm)


State 39

    5 declaration: type VAR MISC_SEMI .

    $default  reduce using rule 5 (declaration)


State 40

   27 logicExpr: logicExpr logicOperator logicTerm .

    $default  reduce using rule 27 (logicExpr)


State 41

   11 expr: expr . lineOperator term
   15 factor: MISC_LP expr . MISC_RP

    OP_ADD   shift, and go to state 42
    OP_SUB   shift, and go to state 43
    MISC_RP  shift, and go to state 51

    lineOperator  go to state 45


State 42

   21 lineOperator: OP_ADD .

    $default  reduce using rule 21 (lineOperator)


State 43

   22 lineOperator: OP_SUB .

    $default  reduce using rule 22 (lineOperator)


State 44

    7 assignment: VAR ASSIGN expr MISC_SEMI .

    $default  reduce using rule 7 (assignment)


State 45

   11 expr: expr lineOperator . term

    OP_SUB    shift, and go to state 3
    VAR       shift, and go to state 32
    LIT_INT   shift, and go to state 8
    LIT_ZERO  shift, and go to state 10
    MISC_LP   shift, and go to state 33

    term    go to state 52
    factor  go to state 36
    number  go to state 37


State 46

   23 pointOperator: OP_MUL .

    $default  reduce using rule 23 (pointOperator)


State 47

   24 pointOperator: OP_DIV .

    $default  reduce using rule 24 (pointOperator)


State 48

   25 pointOperator: OP_POT .

    $default  reduce using rule 25 (pointOperator)


State 49

   26 pointOperator: OP_MOD .

    $default  reduce using rule 26 (pointOperator)


State 50

   13 term: term pointOperator . factor

    OP_SUB    shift, and go to state 3
    VAR       shift, and go to state 32
    LIT_INT   shift, and go to state 8
    LIT_ZERO  shift, and go to state 10
    MISC_LP   shift, and go to state 33

    factor  go to state 53
    number  go to state 37


State 51

   15 factor: MISC_LP expr MISC_RP .

    $default  reduce using rule 15 (factor)


State 52

   11 expr: expr lineOperator term .
   13 term: term . pointOperator factor

    OP_MUL  shift, and go to state 46
    OP_DIV  shift, and go to state 47
    OP_POT  shift, and go to state 48
    OP_MOD  shift, and go to state 49

    $default  reduce using rule 11 (expr)

    pointOperator  go to state 50


State 53

   13 term: term pointOperator factor .

    $default  reduce using rule 13 (term)
