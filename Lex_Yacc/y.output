Terminals unused in grammar

    LOGIC_NOT
    ERROR


Grammar

    0 $accept: program $end

    1 program: program declaration
    2        | program assignment
    3        | program controlBlock
    4        | %empty

    5 declaration: type VAR MISC_SEMI
    6            | type assignment
    7            | CONST_DECL type assignment
    8            | type TYPE_ARRAY assignment

    9 assignment: VAR ASSIGN exprlvl_1 MISC_SEMI
   10           | VAR ASSIGN LIT_CHAR MISC_SEMI
   11           | VAR ASSIGN LIT_STRING MISC_SEMI
   12           | VAR ASSIGN ARR_LP arraystruct ARR_RP MISC_SEMI

   13 arraystruct: arrayitems
   14            | arrayitems ARR_SEP arraystruct

   15 arrayitems: exprlvl_1
   16           | LIT_CHAR
   17           | LIT_STRING

   18 type: TYPE_INT
   19     | TYPE_FLOAT
   20     | TYPE_CHAR
   21     | TYPE_STRING
   22     | TYPE_BOOL

   23 exprlvl_1: exprlvl_1 logicOperator exprlvl_2
   24          | exprlvl_2

   25 exprlvl_2: exprlvl_2 lineOperator exprlvl_3
   26          | exprlvl_3

   27 exprlvl_3: exprlvl_3 pointOperator exprlvl_4
   28          | exprlvl_4

   29 exprlvl_4: exprlvl_4 potOperator literal
   30          | literal

   31 literal: MISC_LP exprlvl_1 MISC_RP
   32        | LIT_BOOL
   33        | number
   34        | VAR

   35 number: LIT_INT
   36       | LIT_FLOAT
   37       | LIT_ZERO
   38       | OP_SUB LIT_INT
   39       | OP_SUB LIT_FLOAT

   40 lineOperator: OP_ADD
   41             | OP_SUB

   42 pointOperator: OP_MUL
   43              | OP_DIV
   44              | OP_MOD

   45 potOperator: OP_POT

   46 logicOperator: COMP_EQL
   47              | COMP_LT
   48              | COMP_LE
   49              | COMP_GT
   50              | COMP_GE
   51              | LOGIC_AND
   52              | LOGIC_OR

   53 controlBlock: controlIf
   54             | controlWhile

   55 controlIf: CTRL_IF exprlvl_1 CTRL_THEN program controlElif CTRL_END
   56          | CTRL_IF exprlvl_1 CTRL_THEN program controlElif CTRL_ELSE program CTRL_END

   57 controlElif: CTRL_ELIF exprlvl_1 CTRL_THEN program controlElif
   58            | %empty

   59 controlWhile: CTRL_WHILE exprlvl_1 CTRL_DO program CTRL_END
   60             | CTRL_DO program CTRL_WHILE exprlvl_1 CTRL_END


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    OP_ADD (258) 40
    OP_SUB (259) 38 39 41
    OP_MUL (260) 42
    OP_DIV (261) 43
    OP_POT (262) 45
    OP_MOD (263) 44
    CONST_DECL (264) 7
    ASSIGN (265) 9 10 11 12
    COMP_EQL (266) 46
    COMP_LT (267) 47
    COMP_LE (268) 48
    COMP_GT (269) 49
    COMP_GE (270) 50
    LOGIC_AND (271) 51
    LOGIC_OR (272) 52
    LOGIC_NOT (273)
    VAR <sval> (274) 5 9 10 11 12 34
    TYPE_INT (275) 18
    TYPE_CHAR (276) 20
    TYPE_BOOL (277) 22
    TYPE_FLOAT (278) 19
    TYPE_STRING (279) 21
    TYPE_ARRAY (280) 8
    ARR_LP (281) 12
    ARR_RP (282) 12
    ARR_SEP (283) 14
    LIT_INT <nval> (284) 35 38
    LIT_BOOL <nval> (285) 32
    LIT_CHAR <sval> (286) 10 16
    LIT_ZERO <nval> (287) 37
    LIT_STRING <sval> (288) 11 17
    LIT_FLOAT <nval> (289) 36 39
    CTRL_IF (290) 55 56
    CTRL_THEN (291) 55 56 57
    CTRL_ELSE (292) 56
    CTRL_ELIF (293) 57
    CTRL_END (294) 55 56 59 60
    CTRL_WHILE (295) 59 60
    CTRL_DO (296) 59 60
    MISC_LP (297) 31
    MISC_RP (298) 31
    MISC_SEMI (299) 5 9 10 11 12
    ERROR (300)


Nonterminals, with rules where they appear

    $accept (46)
        on left: 0
    program (47)
        on left: 1 2 3 4
        on right: 0 1 2 3 55 56 57 59 60
    declaration (48)
        on left: 5 6 7 8
        on right: 1
    assignment (49)
        on left: 9 10 11 12
        on right: 2 6 7 8
    arraystruct (50)
        on left: 13 14
        on right: 12 14
    arrayitems (51)
        on left: 15 16 17
        on right: 13 14
    type (52)
        on left: 18 19 20 21 22
        on right: 5 6 7 8
    exprlvl_1 (53)
        on left: 23 24
        on right: 9 15 23 31 55 56 57 59 60
    exprlvl_2 (54)
        on left: 25 26
        on right: 23 24 25
    exprlvl_3 (55)
        on left: 27 28
        on right: 25 26 27
    exprlvl_4 (56)
        on left: 29 30
        on right: 27 28 29
    literal (57)
        on left: 31 32 33 34
        on right: 29 30
    number <nval> (58)
        on left: 35 36 37 38 39
        on right: 33
    lineOperator (59)
        on left: 40 41
        on right: 25
    pointOperator (60)
        on left: 42 43 44
        on right: 27
    potOperator (61)
        on left: 45
        on right: 29
    logicOperator (62)
        on left: 46 47 48 49 50 51 52
        on right: 23
    controlBlock (63)
        on left: 53 54
        on right: 3
    controlIf (64)
        on left: 55 56
        on right: 53
    controlElif (65)
        on left: 57 58
        on right: 55 56 57
    controlWhile (66)
        on left: 59 60
        on right: 54


State 0

    0 $accept: . program $end

    $default  reduce using rule 4 (program)

    program  go to state 1


State 1

    0 $accept: program . $end
    1 program: program . declaration
    2        | program . assignment
    3        | program . controlBlock

    $end         shift, and go to state 2
    CONST_DECL   shift, and go to state 3
    VAR          shift, and go to state 4
    TYPE_INT     shift, and go to state 5
    TYPE_CHAR    shift, and go to state 6
    TYPE_BOOL    shift, and go to state 7
    TYPE_FLOAT   shift, and go to state 8
    TYPE_STRING  shift, and go to state 9
    CTRL_IF      shift, and go to state 10
    CTRL_WHILE   shift, and go to state 11
    CTRL_DO      shift, and go to state 12

    declaration   go to state 13
    assignment    go to state 14
    type          go to state 15
    controlBlock  go to state 16
    controlIf     go to state 17
    controlWhile  go to state 18


State 2

    0 $accept: program $end .

    $default  accept


State 3

    7 declaration: CONST_DECL . type assignment

    TYPE_INT     shift, and go to state 5
    TYPE_CHAR    shift, and go to state 6
    TYPE_BOOL    shift, and go to state 7
    TYPE_FLOAT   shift, and go to state 8
    TYPE_STRING  shift, and go to state 9

    type  go to state 19


State 4

    9 assignment: VAR . ASSIGN exprlvl_1 MISC_SEMI
   10           | VAR . ASSIGN LIT_CHAR MISC_SEMI
   11           | VAR . ASSIGN LIT_STRING MISC_SEMI
   12           | VAR . ASSIGN ARR_LP arraystruct ARR_RP MISC_SEMI

    ASSIGN  shift, and go to state 20


State 5

   18 type: TYPE_INT .

    $default  reduce using rule 18 (type)


State 6

   20 type: TYPE_CHAR .

    $default  reduce using rule 20 (type)


State 7

   22 type: TYPE_BOOL .

    $default  reduce using rule 22 (type)


State 8

   19 type: TYPE_FLOAT .

    $default  reduce using rule 19 (type)


State 9

   21 type: TYPE_STRING .

    $default  reduce using rule 21 (type)


State 10

   55 controlIf: CTRL_IF . exprlvl_1 CTRL_THEN program controlElif CTRL_END
   56          | CTRL_IF . exprlvl_1 CTRL_THEN program controlElif CTRL_ELSE program CTRL_END

    OP_SUB     shift, and go to state 21
    VAR        shift, and go to state 22
    LIT_INT    shift, and go to state 23
    LIT_BOOL   shift, and go to state 24
    LIT_ZERO   shift, and go to state 25
    LIT_FLOAT  shift, and go to state 26
    MISC_LP    shift, and go to state 27

    exprlvl_1  go to state 28
    exprlvl_2  go to state 29
    exprlvl_3  go to state 30
    exprlvl_4  go to state 31
    literal    go to state 32
    number     go to state 33


State 11

   59 controlWhile: CTRL_WHILE . exprlvl_1 CTRL_DO program CTRL_END

    OP_SUB     shift, and go to state 21
    VAR        shift, and go to state 22
    LIT_INT    shift, and go to state 23
    LIT_BOOL   shift, and go to state 24
    LIT_ZERO   shift, and go to state 25
    LIT_FLOAT  shift, and go to state 26
    MISC_LP    shift, and go to state 27

    exprlvl_1  go to state 34
    exprlvl_2  go to state 29
    exprlvl_3  go to state 30
    exprlvl_4  go to state 31
    literal    go to state 32
    number     go to state 33


State 12

   60 controlWhile: CTRL_DO . program CTRL_WHILE exprlvl_1 CTRL_END

    $default  reduce using rule 4 (program)

    program  go to state 35


State 13

    1 program: program declaration .

    $default  reduce using rule 1 (program)


State 14

    2 program: program assignment .

    $default  reduce using rule 2 (program)


State 15

    5 declaration: type . VAR MISC_SEMI
    6            | type . assignment
    8            | type . TYPE_ARRAY assignment

    VAR         shift, and go to state 36
    TYPE_ARRAY  shift, and go to state 37

    assignment  go to state 38


State 16

    3 program: program controlBlock .

    $default  reduce using rule 3 (program)


State 17

   53 controlBlock: controlIf .

    $default  reduce using rule 53 (controlBlock)


State 18

   54 controlBlock: controlWhile .

    $default  reduce using rule 54 (controlBlock)


State 19

    7 declaration: CONST_DECL type . assignment

    VAR  shift, and go to state 4

    assignment  go to state 39


State 20

    9 assignment: VAR ASSIGN . exprlvl_1 MISC_SEMI
   10           | VAR ASSIGN . LIT_CHAR MISC_SEMI
   11           | VAR ASSIGN . LIT_STRING MISC_SEMI
   12           | VAR ASSIGN . ARR_LP arraystruct ARR_RP MISC_SEMI

    OP_SUB      shift, and go to state 21
    VAR         shift, and go to state 22
    ARR_LP      shift, and go to state 40
    LIT_INT     shift, and go to state 23
    LIT_BOOL    shift, and go to state 24
    LIT_CHAR    shift, and go to state 41
    LIT_ZERO    shift, and go to state 25
    LIT_STRING  shift, and go to state 42
    LIT_FLOAT   shift, and go to state 26
    MISC_LP     shift, and go to state 27

    exprlvl_1  go to state 43
    exprlvl_2  go to state 29
    exprlvl_3  go to state 30
    exprlvl_4  go to state 31
    literal    go to state 32
    number     go to state 33


State 21

   38 number: OP_SUB . LIT_INT
   39       | OP_SUB . LIT_FLOAT

    LIT_INT    shift, and go to state 44
    LIT_FLOAT  shift, and go to state 45


State 22

   34 literal: VAR .

    $default  reduce using rule 34 (literal)


State 23

   35 number: LIT_INT .

    $default  reduce using rule 35 (number)


State 24

   32 literal: LIT_BOOL .

    $default  reduce using rule 32 (literal)


State 25

   37 number: LIT_ZERO .

    $default  reduce using rule 37 (number)


State 26

   36 number: LIT_FLOAT .

    $default  reduce using rule 36 (number)


State 27

   31 literal: MISC_LP . exprlvl_1 MISC_RP

    OP_SUB     shift, and go to state 21
    VAR        shift, and go to state 22
    LIT_INT    shift, and go to state 23
    LIT_BOOL   shift, and go to state 24
    LIT_ZERO   shift, and go to state 25
    LIT_FLOAT  shift, and go to state 26
    MISC_LP    shift, and go to state 27

    exprlvl_1  go to state 46
    exprlvl_2  go to state 29
    exprlvl_3  go to state 30
    exprlvl_4  go to state 31
    literal    go to state 32
    number     go to state 33


State 28

   23 exprlvl_1: exprlvl_1 . logicOperator exprlvl_2
   55 controlIf: CTRL_IF exprlvl_1 . CTRL_THEN program controlElif CTRL_END
   56          | CTRL_IF exprlvl_1 . CTRL_THEN program controlElif CTRL_ELSE program CTRL_END

    COMP_EQL   shift, and go to state 47
    COMP_LT    shift, and go to state 48
    COMP_LE    shift, and go to state 49
    COMP_GT    shift, and go to state 50
    COMP_GE    shift, and go to state 51
    LOGIC_AND  shift, and go to state 52
    LOGIC_OR   shift, and go to state 53
    CTRL_THEN  shift, and go to state 54

    logicOperator  go to state 55


State 29

   24 exprlvl_1: exprlvl_2 .
   25 exprlvl_2: exprlvl_2 . lineOperator exprlvl_3

    OP_ADD  shift, and go to state 56
    OP_SUB  shift, and go to state 57

    $default  reduce using rule 24 (exprlvl_1)

    lineOperator  go to state 58


State 30

   26 exprlvl_2: exprlvl_3 .
   27 exprlvl_3: exprlvl_3 . pointOperator exprlvl_4

    OP_MUL  shift, and go to state 59
    OP_DIV  shift, and go to state 60
    OP_MOD  shift, and go to state 61

    $default  reduce using rule 26 (exprlvl_2)

    pointOperator  go to state 62


State 31

   28 exprlvl_3: exprlvl_4 .
   29 exprlvl_4: exprlvl_4 . potOperator literal

    OP_POT  shift, and go to state 63

    $default  reduce using rule 28 (exprlvl_3)

    potOperator  go to state 64


State 32

   30 exprlvl_4: literal .

    $default  reduce using rule 30 (exprlvl_4)


State 33

   33 literal: number .

    $default  reduce using rule 33 (literal)


State 34

   23 exprlvl_1: exprlvl_1 . logicOperator exprlvl_2
   59 controlWhile: CTRL_WHILE exprlvl_1 . CTRL_DO program CTRL_END

    COMP_EQL   shift, and go to state 47
    COMP_LT    shift, and go to state 48
    COMP_LE    shift, and go to state 49
    COMP_GT    shift, and go to state 50
    COMP_GE    shift, and go to state 51
    LOGIC_AND  shift, and go to state 52
    LOGIC_OR   shift, and go to state 53
    CTRL_DO    shift, and go to state 65

    logicOperator  go to state 55


State 35

    1 program: program . declaration
    2        | program . assignment
    3        | program . controlBlock
   60 controlWhile: CTRL_DO program . CTRL_WHILE exprlvl_1 CTRL_END

    CONST_DECL   shift, and go to state 3
    VAR          shift, and go to state 4
    TYPE_INT     shift, and go to state 5
    TYPE_CHAR    shift, and go to state 6
    TYPE_BOOL    shift, and go to state 7
    TYPE_FLOAT   shift, and go to state 8
    TYPE_STRING  shift, and go to state 9
    CTRL_IF      shift, and go to state 10
    CTRL_WHILE   shift, and go to state 66
    CTRL_DO      shift, and go to state 12

    declaration   go to state 13
    assignment    go to state 14
    type          go to state 15
    controlBlock  go to state 16
    controlIf     go to state 17
    controlWhile  go to state 18


State 36

    5 declaration: type VAR . MISC_SEMI
    9 assignment: VAR . ASSIGN exprlvl_1 MISC_SEMI
   10           | VAR . ASSIGN LIT_CHAR MISC_SEMI
   11           | VAR . ASSIGN LIT_STRING MISC_SEMI
   12           | VAR . ASSIGN ARR_LP arraystruct ARR_RP MISC_SEMI

    ASSIGN     shift, and go to state 20
    MISC_SEMI  shift, and go to state 67


State 37

    8 declaration: type TYPE_ARRAY . assignment

    VAR  shift, and go to state 4

    assignment  go to state 68


State 38

    6 declaration: type assignment .

    $default  reduce using rule 6 (declaration)


State 39

    7 declaration: CONST_DECL type assignment .

    $default  reduce using rule 7 (declaration)


State 40

   12 assignment: VAR ASSIGN ARR_LP . arraystruct ARR_RP MISC_SEMI

    OP_SUB      shift, and go to state 21
    VAR         shift, and go to state 22
    LIT_INT     shift, and go to state 23
    LIT_BOOL    shift, and go to state 24
    LIT_CHAR    shift, and go to state 69
    LIT_ZERO    shift, and go to state 25
    LIT_STRING  shift, and go to state 70
    LIT_FLOAT   shift, and go to state 26
    MISC_LP     shift, and go to state 27

    arraystruct  go to state 71
    arrayitems   go to state 72
    exprlvl_1    go to state 73
    exprlvl_2    go to state 29
    exprlvl_3    go to state 30
    exprlvl_4    go to state 31
    literal      go to state 32
    number       go to state 33


State 41

   10 assignment: VAR ASSIGN LIT_CHAR . MISC_SEMI

    MISC_SEMI  shift, and go to state 74


State 42

   11 assignment: VAR ASSIGN LIT_STRING . MISC_SEMI

    MISC_SEMI  shift, and go to state 75


State 43

    9 assignment: VAR ASSIGN exprlvl_1 . MISC_SEMI
   23 exprlvl_1: exprlvl_1 . logicOperator exprlvl_2

    COMP_EQL   shift, and go to state 47
    COMP_LT    shift, and go to state 48
    COMP_LE    shift, and go to state 49
    COMP_GT    shift, and go to state 50
    COMP_GE    shift, and go to state 51
    LOGIC_AND  shift, and go to state 52
    LOGIC_OR   shift, and go to state 53
    MISC_SEMI  shift, and go to state 76

    logicOperator  go to state 55


State 44

   38 number: OP_SUB LIT_INT .

    $default  reduce using rule 38 (number)


State 45

   39 number: OP_SUB LIT_FLOAT .

    $default  reduce using rule 39 (number)


State 46

   23 exprlvl_1: exprlvl_1 . logicOperator exprlvl_2
   31 literal: MISC_LP exprlvl_1 . MISC_RP

    COMP_EQL   shift, and go to state 47
    COMP_LT    shift, and go to state 48
    COMP_LE    shift, and go to state 49
    COMP_GT    shift, and go to state 50
    COMP_GE    shift, and go to state 51
    LOGIC_AND  shift, and go to state 52
    LOGIC_OR   shift, and go to state 53
    MISC_RP    shift, and go to state 77

    logicOperator  go to state 55


State 47

   46 logicOperator: COMP_EQL .

    $default  reduce using rule 46 (logicOperator)


State 48

   47 logicOperator: COMP_LT .

    $default  reduce using rule 47 (logicOperator)


State 49

   48 logicOperator: COMP_LE .

    $default  reduce using rule 48 (logicOperator)


State 50

   49 logicOperator: COMP_GT .

    $default  reduce using rule 49 (logicOperator)


State 51

   50 logicOperator: COMP_GE .

    $default  reduce using rule 50 (logicOperator)


State 52

   51 logicOperator: LOGIC_AND .

    $default  reduce using rule 51 (logicOperator)


State 53

   52 logicOperator: LOGIC_OR .

    $default  reduce using rule 52 (logicOperator)


State 54

   55 controlIf: CTRL_IF exprlvl_1 CTRL_THEN . program controlElif CTRL_END
   56          | CTRL_IF exprlvl_1 CTRL_THEN . program controlElif CTRL_ELSE program CTRL_END

    $default  reduce using rule 4 (program)

    program  go to state 78


State 55

   23 exprlvl_1: exprlvl_1 logicOperator . exprlvl_2

    OP_SUB     shift, and go to state 21
    VAR        shift, and go to state 22
    LIT_INT    shift, and go to state 23
    LIT_BOOL   shift, and go to state 24
    LIT_ZERO   shift, and go to state 25
    LIT_FLOAT  shift, and go to state 26
    MISC_LP    shift, and go to state 27

    exprlvl_2  go to state 79
    exprlvl_3  go to state 30
    exprlvl_4  go to state 31
    literal    go to state 32
    number     go to state 33


State 56

   40 lineOperator: OP_ADD .

    $default  reduce using rule 40 (lineOperator)


State 57

   41 lineOperator: OP_SUB .

    $default  reduce using rule 41 (lineOperator)


State 58

   25 exprlvl_2: exprlvl_2 lineOperator . exprlvl_3

    OP_SUB     shift, and go to state 21
    VAR        shift, and go to state 22
    LIT_INT    shift, and go to state 23
    LIT_BOOL   shift, and go to state 24
    LIT_ZERO   shift, and go to state 25
    LIT_FLOAT  shift, and go to state 26
    MISC_LP    shift, and go to state 27

    exprlvl_3  go to state 80
    exprlvl_4  go to state 31
    literal    go to state 32
    number     go to state 33


State 59

   42 pointOperator: OP_MUL .

    $default  reduce using rule 42 (pointOperator)


State 60

   43 pointOperator: OP_DIV .

    $default  reduce using rule 43 (pointOperator)


State 61

   44 pointOperator: OP_MOD .

    $default  reduce using rule 44 (pointOperator)


State 62

   27 exprlvl_3: exprlvl_3 pointOperator . exprlvl_4

    OP_SUB     shift, and go to state 21
    VAR        shift, and go to state 22
    LIT_INT    shift, and go to state 23
    LIT_BOOL   shift, and go to state 24
    LIT_ZERO   shift, and go to state 25
    LIT_FLOAT  shift, and go to state 26
    MISC_LP    shift, and go to state 27

    exprlvl_4  go to state 81
    literal    go to state 32
    number     go to state 33


State 63

   45 potOperator: OP_POT .

    $default  reduce using rule 45 (potOperator)


State 64

   29 exprlvl_4: exprlvl_4 potOperator . literal

    OP_SUB     shift, and go to state 21
    VAR        shift, and go to state 22
    LIT_INT    shift, and go to state 23
    LIT_BOOL   shift, and go to state 24
    LIT_ZERO   shift, and go to state 25
    LIT_FLOAT  shift, and go to state 26
    MISC_LP    shift, and go to state 27

    literal  go to state 82
    number   go to state 33


State 65

   59 controlWhile: CTRL_WHILE exprlvl_1 CTRL_DO . program CTRL_END

    $default  reduce using rule 4 (program)

    program  go to state 83


State 66

   59 controlWhile: CTRL_WHILE . exprlvl_1 CTRL_DO program CTRL_END
   60             | CTRL_DO program CTRL_WHILE . exprlvl_1 CTRL_END

    OP_SUB     shift, and go to state 21
    VAR        shift, and go to state 22
    LIT_INT    shift, and go to state 23
    LIT_BOOL   shift, and go to state 24
    LIT_ZERO   shift, and go to state 25
    LIT_FLOAT  shift, and go to state 26
    MISC_LP    shift, and go to state 27

    exprlvl_1  go to state 84
    exprlvl_2  go to state 29
    exprlvl_3  go to state 30
    exprlvl_4  go to state 31
    literal    go to state 32
    number     go to state 33


State 67

    5 declaration: type VAR MISC_SEMI .

    $default  reduce using rule 5 (declaration)


State 68

    8 declaration: type TYPE_ARRAY assignment .

    $default  reduce using rule 8 (declaration)


State 69

   16 arrayitems: LIT_CHAR .

    $default  reduce using rule 16 (arrayitems)


State 70

   17 arrayitems: LIT_STRING .

    $default  reduce using rule 17 (arrayitems)


State 71

   12 assignment: VAR ASSIGN ARR_LP arraystruct . ARR_RP MISC_SEMI

    ARR_RP  shift, and go to state 85


State 72

   13 arraystruct: arrayitems .
   14            | arrayitems . ARR_SEP arraystruct

    ARR_SEP  shift, and go to state 86

    $default  reduce using rule 13 (arraystruct)


State 73

   15 arrayitems: exprlvl_1 .
   23 exprlvl_1: exprlvl_1 . logicOperator exprlvl_2

    COMP_EQL   shift, and go to state 47
    COMP_LT    shift, and go to state 48
    COMP_LE    shift, and go to state 49
    COMP_GT    shift, and go to state 50
    COMP_GE    shift, and go to state 51
    LOGIC_AND  shift, and go to state 52
    LOGIC_OR   shift, and go to state 53

    $default  reduce using rule 15 (arrayitems)

    logicOperator  go to state 55


State 74

   10 assignment: VAR ASSIGN LIT_CHAR MISC_SEMI .

    $default  reduce using rule 10 (assignment)


State 75

   11 assignment: VAR ASSIGN LIT_STRING MISC_SEMI .

    $default  reduce using rule 11 (assignment)


State 76

    9 assignment: VAR ASSIGN exprlvl_1 MISC_SEMI .

    $default  reduce using rule 9 (assignment)


State 77

   31 literal: MISC_LP exprlvl_1 MISC_RP .

    $default  reduce using rule 31 (literal)


State 78

    1 program: program . declaration
    2        | program . assignment
    3        | program . controlBlock
   55 controlIf: CTRL_IF exprlvl_1 CTRL_THEN program . controlElif CTRL_END
   56          | CTRL_IF exprlvl_1 CTRL_THEN program . controlElif CTRL_ELSE program CTRL_END

    CONST_DECL   shift, and go to state 3
    VAR          shift, and go to state 4
    TYPE_INT     shift, and go to state 5
    TYPE_CHAR    shift, and go to state 6
    TYPE_BOOL    shift, and go to state 7
    TYPE_FLOAT   shift, and go to state 8
    TYPE_STRING  shift, and go to state 9
    CTRL_IF      shift, and go to state 10
    CTRL_ELIF    shift, and go to state 87
    CTRL_WHILE   shift, and go to state 11
    CTRL_DO      shift, and go to state 12

    $default  reduce using rule 58 (controlElif)

    declaration   go to state 13
    assignment    go to state 14
    type          go to state 15
    controlBlock  go to state 16
    controlIf     go to state 17
    controlElif   go to state 88
    controlWhile  go to state 18


State 79

   23 exprlvl_1: exprlvl_1 logicOperator exprlvl_2 .
   25 exprlvl_2: exprlvl_2 . lineOperator exprlvl_3

    OP_ADD  shift, and go to state 56
    OP_SUB  shift, and go to state 57

    $default  reduce using rule 23 (exprlvl_1)

    lineOperator  go to state 58


State 80

   25 exprlvl_2: exprlvl_2 lineOperator exprlvl_3 .
   27 exprlvl_3: exprlvl_3 . pointOperator exprlvl_4

    OP_MUL  shift, and go to state 59
    OP_DIV  shift, and go to state 60
    OP_MOD  shift, and go to state 61

    $default  reduce using rule 25 (exprlvl_2)

    pointOperator  go to state 62


State 81

   27 exprlvl_3: exprlvl_3 pointOperator exprlvl_4 .
   29 exprlvl_4: exprlvl_4 . potOperator literal

    OP_POT  shift, and go to state 63

    $default  reduce using rule 27 (exprlvl_3)

    potOperator  go to state 64


State 82

   29 exprlvl_4: exprlvl_4 potOperator literal .

    $default  reduce using rule 29 (exprlvl_4)


State 83

    1 program: program . declaration
    2        | program . assignment
    3        | program . controlBlock
   59 controlWhile: CTRL_WHILE exprlvl_1 CTRL_DO program . CTRL_END

    CONST_DECL   shift, and go to state 3
    VAR          shift, and go to state 4
    TYPE_INT     shift, and go to state 5
    TYPE_CHAR    shift, and go to state 6
    TYPE_BOOL    shift, and go to state 7
    TYPE_FLOAT   shift, and go to state 8
    TYPE_STRING  shift, and go to state 9
    CTRL_IF      shift, and go to state 10
    CTRL_END     shift, and go to state 89
    CTRL_WHILE   shift, and go to state 11
    CTRL_DO      shift, and go to state 12

    declaration   go to state 13
    assignment    go to state 14
    type          go to state 15
    controlBlock  go to state 16
    controlIf     go to state 17
    controlWhile  go to state 18


State 84

   23 exprlvl_1: exprlvl_1 . logicOperator exprlvl_2
   59 controlWhile: CTRL_WHILE exprlvl_1 . CTRL_DO program CTRL_END
   60             | CTRL_DO program CTRL_WHILE exprlvl_1 . CTRL_END

    COMP_EQL   shift, and go to state 47
    COMP_LT    shift, and go to state 48
    COMP_LE    shift, and go to state 49
    COMP_GT    shift, and go to state 50
    COMP_GE    shift, and go to state 51
    LOGIC_AND  shift, and go to state 52
    LOGIC_OR   shift, and go to state 53
    CTRL_END   shift, and go to state 90
    CTRL_DO    shift, and go to state 65

    logicOperator  go to state 55


State 85

   12 assignment: VAR ASSIGN ARR_LP arraystruct ARR_RP . MISC_SEMI

    MISC_SEMI  shift, and go to state 91


State 86

   14 arraystruct: arrayitems ARR_SEP . arraystruct

    OP_SUB      shift, and go to state 21
    VAR         shift, and go to state 22
    LIT_INT     shift, and go to state 23
    LIT_BOOL    shift, and go to state 24
    LIT_CHAR    shift, and go to state 69
    LIT_ZERO    shift, and go to state 25
    LIT_STRING  shift, and go to state 70
    LIT_FLOAT   shift, and go to state 26
    MISC_LP     shift, and go to state 27

    arraystruct  go to state 92
    arrayitems   go to state 72
    exprlvl_1    go to state 73
    exprlvl_2    go to state 29
    exprlvl_3    go to state 30
    exprlvl_4    go to state 31
    literal      go to state 32
    number       go to state 33


State 87

   57 controlElif: CTRL_ELIF . exprlvl_1 CTRL_THEN program controlElif

    OP_SUB     shift, and go to state 21
    VAR        shift, and go to state 22
    LIT_INT    shift, and go to state 23
    LIT_BOOL   shift, and go to state 24
    LIT_ZERO   shift, and go to state 25
    LIT_FLOAT  shift, and go to state 26
    MISC_LP    shift, and go to state 27

    exprlvl_1  go to state 93
    exprlvl_2  go to state 29
    exprlvl_3  go to state 30
    exprlvl_4  go to state 31
    literal    go to state 32
    number     go to state 33


State 88

   55 controlIf: CTRL_IF exprlvl_1 CTRL_THEN program controlElif . CTRL_END
   56          | CTRL_IF exprlvl_1 CTRL_THEN program controlElif . CTRL_ELSE program CTRL_END

    CTRL_ELSE  shift, and go to state 94
    CTRL_END   shift, and go to state 95


State 89

   59 controlWhile: CTRL_WHILE exprlvl_1 CTRL_DO program CTRL_END .

    $default  reduce using rule 59 (controlWhile)


State 90

   60 controlWhile: CTRL_DO program CTRL_WHILE exprlvl_1 CTRL_END .

    $default  reduce using rule 60 (controlWhile)


State 91

   12 assignment: VAR ASSIGN ARR_LP arraystruct ARR_RP MISC_SEMI .

    $default  reduce using rule 12 (assignment)


State 92

   14 arraystruct: arrayitems ARR_SEP arraystruct .

    $default  reduce using rule 14 (arraystruct)


State 93

   23 exprlvl_1: exprlvl_1 . logicOperator exprlvl_2
   57 controlElif: CTRL_ELIF exprlvl_1 . CTRL_THEN program controlElif

    COMP_EQL   shift, and go to state 47
    COMP_LT    shift, and go to state 48
    COMP_LE    shift, and go to state 49
    COMP_GT    shift, and go to state 50
    COMP_GE    shift, and go to state 51
    LOGIC_AND  shift, and go to state 52
    LOGIC_OR   shift, and go to state 53
    CTRL_THEN  shift, and go to state 96

    logicOperator  go to state 55


State 94

   56 controlIf: CTRL_IF exprlvl_1 CTRL_THEN program controlElif CTRL_ELSE . program CTRL_END

    $default  reduce using rule 4 (program)

    program  go to state 97


State 95

   55 controlIf: CTRL_IF exprlvl_1 CTRL_THEN program controlElif CTRL_END .

    $default  reduce using rule 55 (controlIf)


State 96

   57 controlElif: CTRL_ELIF exprlvl_1 CTRL_THEN . program controlElif

    $default  reduce using rule 4 (program)

    program  go to state 98


State 97

    1 program: program . declaration
    2        | program . assignment
    3        | program . controlBlock
   56 controlIf: CTRL_IF exprlvl_1 CTRL_THEN program controlElif CTRL_ELSE program . CTRL_END

    CONST_DECL   shift, and go to state 3
    VAR          shift, and go to state 4
    TYPE_INT     shift, and go to state 5
    TYPE_CHAR    shift, and go to state 6
    TYPE_BOOL    shift, and go to state 7
    TYPE_FLOAT   shift, and go to state 8
    TYPE_STRING  shift, and go to state 9
    CTRL_IF      shift, and go to state 10
    CTRL_END     shift, and go to state 99
    CTRL_WHILE   shift, and go to state 11
    CTRL_DO      shift, and go to state 12

    declaration   go to state 13
    assignment    go to state 14
    type          go to state 15
    controlBlock  go to state 16
    controlIf     go to state 17
    controlWhile  go to state 18


State 98

    1 program: program . declaration
    2        | program . assignment
    3        | program . controlBlock
   57 controlElif: CTRL_ELIF exprlvl_1 CTRL_THEN program . controlElif

    CONST_DECL   shift, and go to state 3
    VAR          shift, and go to state 4
    TYPE_INT     shift, and go to state 5
    TYPE_CHAR    shift, and go to state 6
    TYPE_BOOL    shift, and go to state 7
    TYPE_FLOAT   shift, and go to state 8
    TYPE_STRING  shift, and go to state 9
    CTRL_IF      shift, and go to state 10
    CTRL_ELIF    shift, and go to state 87
    CTRL_WHILE   shift, and go to state 11
    CTRL_DO      shift, and go to state 12

    $default  reduce using rule 58 (controlElif)

    declaration   go to state 13
    assignment    go to state 14
    type          go to state 15
    controlBlock  go to state 16
    controlIf     go to state 17
    controlElif   go to state 100
    controlWhile  go to state 18


State 99

   56 controlIf: CTRL_IF exprlvl_1 CTRL_THEN program controlElif CTRL_ELSE program CTRL_END .

    $default  reduce using rule 56 (controlIf)


State 100

   57 controlElif: CTRL_ELIF exprlvl_1 CTRL_THEN program controlElif .

    $default  reduce using rule 57 (controlElif)
