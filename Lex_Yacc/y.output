Terminals unused in grammar

    LOGIC_NOT
    LIT_CHAR
    CTRL_IF
    CTRL_THEN
    CTRL_ELSE
    CTRL_ELIF
    CTRL_END
    CTRL_WHILE
    CTRL_DO
    ERROR


Grammar

    0 $accept: program $end

    1 program: program declaration
    2        | program assignment
    3        | %empty

    4 declaration: type VAR MISC_SEMI
    5            | type assignment

    6 assignment: VAR ASSIGN expr MISC_SEMI

    7 type: TYPE_INT
    8     | TYPE_CHAR
    9     | TYPE_BOOL

   10 expr: expr lineOperator term
   11     | term

   12 term: term pointOperator factor
   13     | factor

   14 factor: factor logicOperator literal
   15       | literal

   16 literal: MISC_LP expr MISC_RP
   17        | LIT_BOOL
   18        | number
   19        | VAR

   20 number: LIT_INT
   21       | LIT_ZERO
   22       | OP_SUB LIT_INT

   23 lineOperator: OP_ADD
   24             | OP_SUB

   25 pointOperator: OP_MUL
   26              | OP_DIV
   27              | OP_POT
   28              | OP_MOD

   29 logicOperator: COMP_EQL
   30              | COMP_LT
   31              | COMP_LE
   32              | COMP_GT
   33              | COMP_GE
   34              | LOGIC_AND
   35              | LOGIC_OR


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    OP_ADD (258) 23
    OP_SUB (259) 22 24
    OP_MUL (260) 25
    OP_DIV (261) 26
    OP_POT (262) 27
    OP_MOD (263) 28
    ASSIGN (264) 6
    COMP_EQL (265) 29
    COMP_LT (266) 30
    COMP_LE (267) 31
    COMP_GT (268) 32
    COMP_GE (269) 33
    LOGIC_AND (270) 34
    LOGIC_OR (271) 35
    LOGIC_NOT (272)
    VAR (273) 4 6 19
    TYPE_INT (274) 7
    TYPE_CHAR (275) 8
    TYPE_BOOL (276) 9
    LIT_INT (277) 20 22
    LIT_BOOL (278) 17
    LIT_CHAR (279)
    LIT_ZERO (280) 21
    CTRL_IF (281)
    CTRL_THEN (282)
    CTRL_ELSE (283)
    CTRL_ELIF (284)
    CTRL_END (285)
    CTRL_WHILE (286)
    CTRL_DO (287)
    MISC_LP (288) 16
    MISC_RP (289) 16
    MISC_SEMI (290) 4 6
    ERROR (291)


Nonterminals, with rules where they appear

    $accept (37)
        on left: 0
    program (38)
        on left: 1 2 3
        on right: 0 1 2
    declaration (39)
        on left: 4 5
        on right: 1
    assignment (40)
        on left: 6
        on right: 2 5
    type (41)
        on left: 7 8 9
        on right: 4 5
    expr (42)
        on left: 10 11
        on right: 6 10 16
    term (43)
        on left: 12 13
        on right: 10 11 12
    factor (44)
        on left: 14 15
        on right: 12 13 14
    literal (45)
        on left: 16 17 18 19
        on right: 14 15
    number (46)
        on left: 20 21 22
        on right: 18
    lineOperator (47)
        on left: 23 24
        on right: 10
    pointOperator (48)
        on left: 25 26 27 28
        on right: 12
    logicOperator (49)
        on left: 29 30 31 32 33 34 35
        on right: 14


State 0

    0 $accept: . program $end

    $default  reduce using rule 3 (program)

    program  go to state 1


State 1

    0 $accept: program . $end
    1 program: program . declaration
    2        | program . assignment

    $end       shift, and go to state 2
    VAR        shift, and go to state 3
    TYPE_INT   shift, and go to state 4
    TYPE_CHAR  shift, and go to state 5
    TYPE_BOOL  shift, and go to state 6

    declaration  go to state 7
    assignment   go to state 8
    type         go to state 9


State 2

    0 $accept: program $end .

    $default  accept


State 3

    6 assignment: VAR . ASSIGN expr MISC_SEMI

    ASSIGN  shift, and go to state 10


State 4

    7 type: TYPE_INT .

    $default  reduce using rule 7 (type)


State 5

    8 type: TYPE_CHAR .

    $default  reduce using rule 8 (type)


State 6

    9 type: TYPE_BOOL .

    $default  reduce using rule 9 (type)


State 7

    1 program: program declaration .

    $default  reduce using rule 1 (program)


State 8

    2 program: program assignment .

    $default  reduce using rule 2 (program)


State 9

    4 declaration: type . VAR MISC_SEMI
    5            | type . assignment

    VAR  shift, and go to state 11

    assignment  go to state 12


State 10

    6 assignment: VAR ASSIGN . expr MISC_SEMI

    OP_SUB    shift, and go to state 13
    VAR       shift, and go to state 14
    LIT_INT   shift, and go to state 15
    LIT_BOOL  shift, and go to state 16
    LIT_ZERO  shift, and go to state 17
    MISC_LP   shift, and go to state 18

    expr     go to state 19
    term     go to state 20
    factor   go to state 21
    literal  go to state 22
    number   go to state 23


State 11

    4 declaration: type VAR . MISC_SEMI
    6 assignment: VAR . ASSIGN expr MISC_SEMI

    ASSIGN     shift, and go to state 10
    MISC_SEMI  shift, and go to state 24


State 12

    5 declaration: type assignment .

    $default  reduce using rule 5 (declaration)


State 13

   22 number: OP_SUB . LIT_INT

    LIT_INT  shift, and go to state 25


State 14

   19 literal: VAR .

    $default  reduce using rule 19 (literal)


State 15

   20 number: LIT_INT .

    $default  reduce using rule 20 (number)


State 16

   17 literal: LIT_BOOL .

    $default  reduce using rule 17 (literal)


State 17

   21 number: LIT_ZERO .

    $default  reduce using rule 21 (number)


State 18

   16 literal: MISC_LP . expr MISC_RP

    OP_SUB    shift, and go to state 13
    VAR       shift, and go to state 14
    LIT_INT   shift, and go to state 15
    LIT_BOOL  shift, and go to state 16
    LIT_ZERO  shift, and go to state 17
    MISC_LP   shift, and go to state 18

    expr     go to state 26
    term     go to state 20
    factor   go to state 21
    literal  go to state 22
    number   go to state 23


State 19

    6 assignment: VAR ASSIGN expr . MISC_SEMI
   10 expr: expr . lineOperator term

    OP_ADD     shift, and go to state 27
    OP_SUB     shift, and go to state 28
    MISC_SEMI  shift, and go to state 29

    lineOperator  go to state 30


State 20

   11 expr: term .
   12 term: term . pointOperator factor

    OP_MUL  shift, and go to state 31
    OP_DIV  shift, and go to state 32
    OP_POT  shift, and go to state 33
    OP_MOD  shift, and go to state 34

    $default  reduce using rule 11 (expr)

    pointOperator  go to state 35


State 21

   13 term: factor .
   14 factor: factor . logicOperator literal

    COMP_EQL   shift, and go to state 36
    COMP_LT    shift, and go to state 37
    COMP_LE    shift, and go to state 38
    COMP_GT    shift, and go to state 39
    COMP_GE    shift, and go to state 40
    LOGIC_AND  shift, and go to state 41
    LOGIC_OR   shift, and go to state 42

    $default  reduce using rule 13 (term)

    logicOperator  go to state 43


State 22

   15 factor: literal .

    $default  reduce using rule 15 (factor)


State 23

   18 literal: number .

    $default  reduce using rule 18 (literal)


State 24

    4 declaration: type VAR MISC_SEMI .

    $default  reduce using rule 4 (declaration)


State 25

   22 number: OP_SUB LIT_INT .

    $default  reduce using rule 22 (number)


State 26

   10 expr: expr . lineOperator term
   16 literal: MISC_LP expr . MISC_RP

    OP_ADD   shift, and go to state 27
    OP_SUB   shift, and go to state 28
    MISC_RP  shift, and go to state 44

    lineOperator  go to state 30


State 27

   23 lineOperator: OP_ADD .

    $default  reduce using rule 23 (lineOperator)


State 28

   24 lineOperator: OP_SUB .

    $default  reduce using rule 24 (lineOperator)


State 29

    6 assignment: VAR ASSIGN expr MISC_SEMI .

    $default  reduce using rule 6 (assignment)


State 30

   10 expr: expr lineOperator . term

    OP_SUB    shift, and go to state 13
    VAR       shift, and go to state 14
    LIT_INT   shift, and go to state 15
    LIT_BOOL  shift, and go to state 16
    LIT_ZERO  shift, and go to state 17
    MISC_LP   shift, and go to state 18

    term     go to state 45
    factor   go to state 21
    literal  go to state 22
    number   go to state 23


State 31

   25 pointOperator: OP_MUL .

    $default  reduce using rule 25 (pointOperator)


State 32

   26 pointOperator: OP_DIV .

    $default  reduce using rule 26 (pointOperator)


State 33

   27 pointOperator: OP_POT .

    $default  reduce using rule 27 (pointOperator)


State 34

   28 pointOperator: OP_MOD .

    $default  reduce using rule 28 (pointOperator)


State 35

   12 term: term pointOperator . factor

    OP_SUB    shift, and go to state 13
    VAR       shift, and go to state 14
    LIT_INT   shift, and go to state 15
    LIT_BOOL  shift, and go to state 16
    LIT_ZERO  shift, and go to state 17
    MISC_LP   shift, and go to state 18

    factor   go to state 46
    literal  go to state 22
    number   go to state 23


State 36

   29 logicOperator: COMP_EQL .

    $default  reduce using rule 29 (logicOperator)


State 37

   30 logicOperator: COMP_LT .

    $default  reduce using rule 30 (logicOperator)


State 38

   31 logicOperator: COMP_LE .

    $default  reduce using rule 31 (logicOperator)


State 39

   32 logicOperator: COMP_GT .

    $default  reduce using rule 32 (logicOperator)


State 40

   33 logicOperator: COMP_GE .

    $default  reduce using rule 33 (logicOperator)


State 41

   34 logicOperator: LOGIC_AND .

    $default  reduce using rule 34 (logicOperator)


State 42

   35 logicOperator: LOGIC_OR .

    $default  reduce using rule 35 (logicOperator)


State 43

   14 factor: factor logicOperator . literal

    OP_SUB    shift, and go to state 13
    VAR       shift, and go to state 14
    LIT_INT   shift, and go to state 15
    LIT_BOOL  shift, and go to state 16
    LIT_ZERO  shift, and go to state 17
    MISC_LP   shift, and go to state 18

    literal  go to state 47
    number   go to state 23


State 44

   16 literal: MISC_LP expr MISC_RP .

    $default  reduce using rule 16 (literal)


State 45

   10 expr: expr lineOperator term .
   12 term: term . pointOperator factor

    OP_MUL  shift, and go to state 31
    OP_DIV  shift, and go to state 32
    OP_POT  shift, and go to state 33
    OP_MOD  shift, and go to state 34

    $default  reduce using rule 10 (expr)

    pointOperator  go to state 35


State 46

   12 term: term pointOperator factor .
   14 factor: factor . logicOperator literal

    COMP_EQL   shift, and go to state 36
    COMP_LT    shift, and go to state 37
    COMP_LE    shift, and go to state 38
    COMP_GT    shift, and go to state 39
    COMP_GE    shift, and go to state 40
    LOGIC_AND  shift, and go to state 41
    LOGIC_OR   shift, and go to state 42

    $default  reduce using rule 12 (term)

    logicOperator  go to state 43


State 47

   14 factor: factor logicOperator literal .

    $default  reduce using rule 14 (factor)
