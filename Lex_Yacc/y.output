Terminals unused in grammar

    LOGIC_NOT
    ERROR


Grammar

    0 $accept: program $end

    1 program: program declaration
    2        | program assignment
    3        | program controlBlock
    4        | %empty

    5 declaration: type VAR MISC_SEMI
    6            | type assignment
    7            | CONST_DECL type assignment
    8            | type TYPE_ARRAY assignment

    9 assignment: VAR ASSIGN exprlvl_1 MISC_SEMI
   10           | VAR ASSIGN LIT_CHAR MISC_SEMI
   11           | VAR ASSIGN ARR_LP arraystruct ARR_RP MISC_SEMI

   12 arraystruct: arrayitems
   13            | arrayitems ARR_SEP arraystruct

   14 arrayitems: exprlvl_1
   15           | LIT_CHAR

   16 type: TYPE_INT
   17     | TYPE_FLOAT
   18     | TYPE_CHAR
   19     | TYPE_STRING
   20     | TYPE_BOOL

   21 exprlvl_1: exprlvl_1 logicOperator exprlvl_2
   22          | exprlvl_2

   23 exprlvl_2: exprlvl_2 lineOperator exprlvl_3
   24          | exprlvl_3

   25 exprlvl_3: exprlvl_3 pointOperator exprlvl_4
   26          | exprlvl_4

   27 exprlvl_4: exprlvl_4 potOperator literal
   28          | literal

   29 literal: MISC_LP exprlvl_1 MISC_RP
   30        | LIT_BOOL
   31        | number
   32        | VAR

   33 number: LIT_INT
   34       | LIT_ZERO
   35       | OP_SUB LIT_INT

   36 lineOperator: OP_ADD
   37             | OP_SUB

   38 pointOperator: OP_MUL
   39              | OP_DIV
   40              | OP_MOD

   41 potOperator: OP_POT

   42 logicOperator: COMP_EQL
   43              | COMP_LT
   44              | COMP_LE
   45              | COMP_GT
   46              | COMP_GE
   47              | LOGIC_AND
   48              | LOGIC_OR

   49 controlBlock: controlIf
   50             | controlWhile

   51 controlIf: CTRL_IF exprlvl_1 CTRL_THEN program controlElif CTRL_END
   52          | CTRL_IF exprlvl_1 CTRL_THEN program controlElif CTRL_ELSE program CTRL_END

   53 controlElif: CTRL_ELIF exprlvl_1 CTRL_THEN program controlElif
   54            | %empty

   55 controlWhile: CTRL_WHILE exprlvl_1 CTRL_DO program CTRL_END
   56             | CTRL_DO program CTRL_WHILE exprlvl_1 CTRL_END


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    OP_ADD (258) 36
    OP_SUB (259) 35 37
    OP_MUL (260) 38
    OP_DIV (261) 39
    OP_POT (262) 41
    OP_MOD (263) 40
    CONST_DECL (264) 7
    ASSIGN (265) 9 10 11
    COMP_EQL (266) 42
    COMP_LT (267) 43
    COMP_LE (268) 44
    COMP_GT (269) 45
    COMP_GE (270) 46
    LOGIC_AND (271) 47
    LOGIC_OR (272) 48
    LOGIC_NOT (273)
    VAR (274) 5 9 10 11 32
    TYPE_INT (275) 16
    TYPE_CHAR (276) 18
    TYPE_BOOL (277) 20
    TYPE_FLOAT (278) 17
    TYPE_STRING (279) 19
    TYPE_ARRAY (280) 8
    ARR_LP (281) 11
    ARR_RP (282) 11
    ARR_SEP (283) 13
    LIT_INT <ival> (284) 33 35
    LIT_BOOL (285) 30
    LIT_CHAR <sval> (286) 10 15
    LIT_ZERO (287) 34
    CTRL_IF (288) 51 52
    CTRL_THEN (289) 51 52 53
    CTRL_ELSE (290) 52
    CTRL_ELIF (291) 53
    CTRL_END (292) 51 52 55 56
    CTRL_WHILE (293) 55 56
    CTRL_DO (294) 55 56
    MISC_LP (295) 29
    MISC_RP (296) 29
    MISC_SEMI (297) 5 9 10 11
    ERROR (298)


Nonterminals, with rules where they appear

    $accept (44)
        on left: 0
    program (45)
        on left: 1 2 3 4
        on right: 0 1 2 3 51 52 53 55 56
    declaration (46)
        on left: 5 6 7 8
        on right: 1
    assignment (47)
        on left: 9 10 11
        on right: 2 6 7 8
    arraystruct (48)
        on left: 12 13
        on right: 11 13
    arrayitems (49)
        on left: 14 15
        on right: 12 13
    type (50)
        on left: 16 17 18 19 20
        on right: 5 6 7 8
    exprlvl_1 (51)
        on left: 21 22
        on right: 9 14 21 29 51 52 53 55 56
    exprlvl_2 (52)
        on left: 23 24
        on right: 21 22 23
    exprlvl_3 (53)
        on left: 25 26
        on right: 23 24 25
    exprlvl_4 (54)
        on left: 27 28
        on right: 25 26 27
    literal (55)
        on left: 29 30 31 32
        on right: 27 28
    number (56)
        on left: 33 34 35
        on right: 31
    lineOperator (57)
        on left: 36 37
        on right: 23
    pointOperator (58)
        on left: 38 39 40
        on right: 25
    potOperator (59)
        on left: 41
        on right: 27
    logicOperator (60)
        on left: 42 43 44 45 46 47 48
        on right: 21
    controlBlock (61)
        on left: 49 50
        on right: 3
    controlIf (62)
        on left: 51 52
        on right: 49
    controlElif (63)
        on left: 53 54
        on right: 51 52 53
    controlWhile (64)
        on left: 55 56
        on right: 50


State 0

    0 $accept: . program $end

    $default  reduce using rule 4 (program)

    program  go to state 1


State 1

    0 $accept: program . $end
    1 program: program . declaration
    2        | program . assignment
    3        | program . controlBlock

    $end         shift, and go to state 2
    CONST_DECL   shift, and go to state 3
    VAR          shift, and go to state 4
    TYPE_INT     shift, and go to state 5
    TYPE_CHAR    shift, and go to state 6
    TYPE_BOOL    shift, and go to state 7
    TYPE_FLOAT   shift, and go to state 8
    TYPE_STRING  shift, and go to state 9
    CTRL_IF      shift, and go to state 10
    CTRL_WHILE   shift, and go to state 11
    CTRL_DO      shift, and go to state 12

    declaration   go to state 13
    assignment    go to state 14
    type          go to state 15
    controlBlock  go to state 16
    controlIf     go to state 17
    controlWhile  go to state 18


State 2

    0 $accept: program $end .

    $default  accept


State 3

    7 declaration: CONST_DECL . type assignment

    TYPE_INT     shift, and go to state 5
    TYPE_CHAR    shift, and go to state 6
    TYPE_BOOL    shift, and go to state 7
    TYPE_FLOAT   shift, and go to state 8
    TYPE_STRING  shift, and go to state 9

    type  go to state 19


State 4

    9 assignment: VAR . ASSIGN exprlvl_1 MISC_SEMI
   10           | VAR . ASSIGN LIT_CHAR MISC_SEMI
   11           | VAR . ASSIGN ARR_LP arraystruct ARR_RP MISC_SEMI

    ASSIGN  shift, and go to state 20


State 5

   16 type: TYPE_INT .

    $default  reduce using rule 16 (type)


State 6

   18 type: TYPE_CHAR .

    $default  reduce using rule 18 (type)


State 7

   20 type: TYPE_BOOL .

    $default  reduce using rule 20 (type)


State 8

   17 type: TYPE_FLOAT .

    $default  reduce using rule 17 (type)


State 9

   19 type: TYPE_STRING .

    $default  reduce using rule 19 (type)


State 10

   51 controlIf: CTRL_IF . exprlvl_1 CTRL_THEN program controlElif CTRL_END
   52          | CTRL_IF . exprlvl_1 CTRL_THEN program controlElif CTRL_ELSE program CTRL_END

    OP_SUB    shift, and go to state 21
    VAR       shift, and go to state 22
    LIT_INT   shift, and go to state 23
    LIT_BOOL  shift, and go to state 24
    LIT_ZERO  shift, and go to state 25
    MISC_LP   shift, and go to state 26

    exprlvl_1  go to state 27
    exprlvl_2  go to state 28
    exprlvl_3  go to state 29
    exprlvl_4  go to state 30
    literal    go to state 31
    number     go to state 32


State 11

   55 controlWhile: CTRL_WHILE . exprlvl_1 CTRL_DO program CTRL_END

    OP_SUB    shift, and go to state 21
    VAR       shift, and go to state 22
    LIT_INT   shift, and go to state 23
    LIT_BOOL  shift, and go to state 24
    LIT_ZERO  shift, and go to state 25
    MISC_LP   shift, and go to state 26

    exprlvl_1  go to state 33
    exprlvl_2  go to state 28
    exprlvl_3  go to state 29
    exprlvl_4  go to state 30
    literal    go to state 31
    number     go to state 32


State 12

   56 controlWhile: CTRL_DO . program CTRL_WHILE exprlvl_1 CTRL_END

    $default  reduce using rule 4 (program)

    program  go to state 34


State 13

    1 program: program declaration .

    $default  reduce using rule 1 (program)


State 14

    2 program: program assignment .

    $default  reduce using rule 2 (program)


State 15

    5 declaration: type . VAR MISC_SEMI
    6            | type . assignment
    8            | type . TYPE_ARRAY assignment

    VAR         shift, and go to state 35
    TYPE_ARRAY  shift, and go to state 36

    assignment  go to state 37


State 16

    3 program: program controlBlock .

    $default  reduce using rule 3 (program)


State 17

   49 controlBlock: controlIf .

    $default  reduce using rule 49 (controlBlock)


State 18

   50 controlBlock: controlWhile .

    $default  reduce using rule 50 (controlBlock)


State 19

    7 declaration: CONST_DECL type . assignment

    VAR  shift, and go to state 4

    assignment  go to state 38


State 20

    9 assignment: VAR ASSIGN . exprlvl_1 MISC_SEMI
   10           | VAR ASSIGN . LIT_CHAR MISC_SEMI
   11           | VAR ASSIGN . ARR_LP arraystruct ARR_RP MISC_SEMI

    OP_SUB    shift, and go to state 21
    VAR       shift, and go to state 22
    ARR_LP    shift, and go to state 39
    LIT_INT   shift, and go to state 23
    LIT_BOOL  shift, and go to state 24
    LIT_CHAR  shift, and go to state 40
    LIT_ZERO  shift, and go to state 25
    MISC_LP   shift, and go to state 26

    exprlvl_1  go to state 41
    exprlvl_2  go to state 28
    exprlvl_3  go to state 29
    exprlvl_4  go to state 30
    literal    go to state 31
    number     go to state 32


State 21

   35 number: OP_SUB . LIT_INT

    LIT_INT  shift, and go to state 42


State 22

   32 literal: VAR .

    $default  reduce using rule 32 (literal)


State 23

   33 number: LIT_INT .

    $default  reduce using rule 33 (number)


State 24

   30 literal: LIT_BOOL .

    $default  reduce using rule 30 (literal)


State 25

   34 number: LIT_ZERO .

    $default  reduce using rule 34 (number)


State 26

   29 literal: MISC_LP . exprlvl_1 MISC_RP

    OP_SUB    shift, and go to state 21
    VAR       shift, and go to state 22
    LIT_INT   shift, and go to state 23
    LIT_BOOL  shift, and go to state 24
    LIT_ZERO  shift, and go to state 25
    MISC_LP   shift, and go to state 26

    exprlvl_1  go to state 43
    exprlvl_2  go to state 28
    exprlvl_3  go to state 29
    exprlvl_4  go to state 30
    literal    go to state 31
    number     go to state 32


State 27

   21 exprlvl_1: exprlvl_1 . logicOperator exprlvl_2
   51 controlIf: CTRL_IF exprlvl_1 . CTRL_THEN program controlElif CTRL_END
   52          | CTRL_IF exprlvl_1 . CTRL_THEN program controlElif CTRL_ELSE program CTRL_END

    COMP_EQL   shift, and go to state 44
    COMP_LT    shift, and go to state 45
    COMP_LE    shift, and go to state 46
    COMP_GT    shift, and go to state 47
    COMP_GE    shift, and go to state 48
    LOGIC_AND  shift, and go to state 49
    LOGIC_OR   shift, and go to state 50
    CTRL_THEN  shift, and go to state 51

    logicOperator  go to state 52


State 28

   22 exprlvl_1: exprlvl_2 .
   23 exprlvl_2: exprlvl_2 . lineOperator exprlvl_3

    OP_ADD  shift, and go to state 53
    OP_SUB  shift, and go to state 54

    $default  reduce using rule 22 (exprlvl_1)

    lineOperator  go to state 55


State 29

   24 exprlvl_2: exprlvl_3 .
   25 exprlvl_3: exprlvl_3 . pointOperator exprlvl_4

    OP_MUL  shift, and go to state 56
    OP_DIV  shift, and go to state 57
    OP_MOD  shift, and go to state 58

    $default  reduce using rule 24 (exprlvl_2)

    pointOperator  go to state 59


State 30

   26 exprlvl_3: exprlvl_4 .
   27 exprlvl_4: exprlvl_4 . potOperator literal

    OP_POT  shift, and go to state 60

    $default  reduce using rule 26 (exprlvl_3)

    potOperator  go to state 61


State 31

   28 exprlvl_4: literal .

    $default  reduce using rule 28 (exprlvl_4)


State 32

   31 literal: number .

    $default  reduce using rule 31 (literal)


State 33

   21 exprlvl_1: exprlvl_1 . logicOperator exprlvl_2
   55 controlWhile: CTRL_WHILE exprlvl_1 . CTRL_DO program CTRL_END

    COMP_EQL   shift, and go to state 44
    COMP_LT    shift, and go to state 45
    COMP_LE    shift, and go to state 46
    COMP_GT    shift, and go to state 47
    COMP_GE    shift, and go to state 48
    LOGIC_AND  shift, and go to state 49
    LOGIC_OR   shift, and go to state 50
    CTRL_DO    shift, and go to state 62

    logicOperator  go to state 52


State 34

    1 program: program . declaration
    2        | program . assignment
    3        | program . controlBlock
   56 controlWhile: CTRL_DO program . CTRL_WHILE exprlvl_1 CTRL_END

    CONST_DECL   shift, and go to state 3
    VAR          shift, and go to state 4
    TYPE_INT     shift, and go to state 5
    TYPE_CHAR    shift, and go to state 6
    TYPE_BOOL    shift, and go to state 7
    TYPE_FLOAT   shift, and go to state 8
    TYPE_STRING  shift, and go to state 9
    CTRL_IF      shift, and go to state 10
    CTRL_WHILE   shift, and go to state 63
    CTRL_DO      shift, and go to state 12

    declaration   go to state 13
    assignment    go to state 14
    type          go to state 15
    controlBlock  go to state 16
    controlIf     go to state 17
    controlWhile  go to state 18


State 35

    5 declaration: type VAR . MISC_SEMI
    9 assignment: VAR . ASSIGN exprlvl_1 MISC_SEMI
   10           | VAR . ASSIGN LIT_CHAR MISC_SEMI
   11           | VAR . ASSIGN ARR_LP arraystruct ARR_RP MISC_SEMI

    ASSIGN     shift, and go to state 20
    MISC_SEMI  shift, and go to state 64


State 36

    8 declaration: type TYPE_ARRAY . assignment

    VAR  shift, and go to state 4

    assignment  go to state 65


State 37

    6 declaration: type assignment .

    $default  reduce using rule 6 (declaration)


State 38

    7 declaration: CONST_DECL type assignment .

    $default  reduce using rule 7 (declaration)


State 39

   11 assignment: VAR ASSIGN ARR_LP . arraystruct ARR_RP MISC_SEMI

    OP_SUB    shift, and go to state 21
    VAR       shift, and go to state 22
    LIT_INT   shift, and go to state 23
    LIT_BOOL  shift, and go to state 24
    LIT_CHAR  shift, and go to state 66
    LIT_ZERO  shift, and go to state 25
    MISC_LP   shift, and go to state 26

    arraystruct  go to state 67
    arrayitems   go to state 68
    exprlvl_1    go to state 69
    exprlvl_2    go to state 28
    exprlvl_3    go to state 29
    exprlvl_4    go to state 30
    literal      go to state 31
    number       go to state 32


State 40

   10 assignment: VAR ASSIGN LIT_CHAR . MISC_SEMI

    MISC_SEMI  shift, and go to state 70


State 41

    9 assignment: VAR ASSIGN exprlvl_1 . MISC_SEMI
   21 exprlvl_1: exprlvl_1 . logicOperator exprlvl_2

    COMP_EQL   shift, and go to state 44
    COMP_LT    shift, and go to state 45
    COMP_LE    shift, and go to state 46
    COMP_GT    shift, and go to state 47
    COMP_GE    shift, and go to state 48
    LOGIC_AND  shift, and go to state 49
    LOGIC_OR   shift, and go to state 50
    MISC_SEMI  shift, and go to state 71

    logicOperator  go to state 52


State 42

   35 number: OP_SUB LIT_INT .

    $default  reduce using rule 35 (number)


State 43

   21 exprlvl_1: exprlvl_1 . logicOperator exprlvl_2
   29 literal: MISC_LP exprlvl_1 . MISC_RP

    COMP_EQL   shift, and go to state 44
    COMP_LT    shift, and go to state 45
    COMP_LE    shift, and go to state 46
    COMP_GT    shift, and go to state 47
    COMP_GE    shift, and go to state 48
    LOGIC_AND  shift, and go to state 49
    LOGIC_OR   shift, and go to state 50
    MISC_RP    shift, and go to state 72

    logicOperator  go to state 52


State 44

   42 logicOperator: COMP_EQL .

    $default  reduce using rule 42 (logicOperator)


State 45

   43 logicOperator: COMP_LT .

    $default  reduce using rule 43 (logicOperator)


State 46

   44 logicOperator: COMP_LE .

    $default  reduce using rule 44 (logicOperator)


State 47

   45 logicOperator: COMP_GT .

    $default  reduce using rule 45 (logicOperator)


State 48

   46 logicOperator: COMP_GE .

    $default  reduce using rule 46 (logicOperator)


State 49

   47 logicOperator: LOGIC_AND .

    $default  reduce using rule 47 (logicOperator)


State 50

   48 logicOperator: LOGIC_OR .

    $default  reduce using rule 48 (logicOperator)


State 51

   51 controlIf: CTRL_IF exprlvl_1 CTRL_THEN . program controlElif CTRL_END
   52          | CTRL_IF exprlvl_1 CTRL_THEN . program controlElif CTRL_ELSE program CTRL_END

    $default  reduce using rule 4 (program)

    program  go to state 73


State 52

   21 exprlvl_1: exprlvl_1 logicOperator . exprlvl_2

    OP_SUB    shift, and go to state 21
    VAR       shift, and go to state 22
    LIT_INT   shift, and go to state 23
    LIT_BOOL  shift, and go to state 24
    LIT_ZERO  shift, and go to state 25
    MISC_LP   shift, and go to state 26

    exprlvl_2  go to state 74
    exprlvl_3  go to state 29
    exprlvl_4  go to state 30
    literal    go to state 31
    number     go to state 32


State 53

   36 lineOperator: OP_ADD .

    $default  reduce using rule 36 (lineOperator)


State 54

   37 lineOperator: OP_SUB .

    $default  reduce using rule 37 (lineOperator)


State 55

   23 exprlvl_2: exprlvl_2 lineOperator . exprlvl_3

    OP_SUB    shift, and go to state 21
    VAR       shift, and go to state 22
    LIT_INT   shift, and go to state 23
    LIT_BOOL  shift, and go to state 24
    LIT_ZERO  shift, and go to state 25
    MISC_LP   shift, and go to state 26

    exprlvl_3  go to state 75
    exprlvl_4  go to state 30
    literal    go to state 31
    number     go to state 32


State 56

   38 pointOperator: OP_MUL .

    $default  reduce using rule 38 (pointOperator)


State 57

   39 pointOperator: OP_DIV .

    $default  reduce using rule 39 (pointOperator)


State 58

   40 pointOperator: OP_MOD .

    $default  reduce using rule 40 (pointOperator)


State 59

   25 exprlvl_3: exprlvl_3 pointOperator . exprlvl_4

    OP_SUB    shift, and go to state 21
    VAR       shift, and go to state 22
    LIT_INT   shift, and go to state 23
    LIT_BOOL  shift, and go to state 24
    LIT_ZERO  shift, and go to state 25
    MISC_LP   shift, and go to state 26

    exprlvl_4  go to state 76
    literal    go to state 31
    number     go to state 32


State 60

   41 potOperator: OP_POT .

    $default  reduce using rule 41 (potOperator)


State 61

   27 exprlvl_4: exprlvl_4 potOperator . literal

    OP_SUB    shift, and go to state 21
    VAR       shift, and go to state 22
    LIT_INT   shift, and go to state 23
    LIT_BOOL  shift, and go to state 24
    LIT_ZERO  shift, and go to state 25
    MISC_LP   shift, and go to state 26

    literal  go to state 77
    number   go to state 32


State 62

   55 controlWhile: CTRL_WHILE exprlvl_1 CTRL_DO . program CTRL_END

    $default  reduce using rule 4 (program)

    program  go to state 78


State 63

   55 controlWhile: CTRL_WHILE . exprlvl_1 CTRL_DO program CTRL_END
   56             | CTRL_DO program CTRL_WHILE . exprlvl_1 CTRL_END

    OP_SUB    shift, and go to state 21
    VAR       shift, and go to state 22
    LIT_INT   shift, and go to state 23
    LIT_BOOL  shift, and go to state 24
    LIT_ZERO  shift, and go to state 25
    MISC_LP   shift, and go to state 26

    exprlvl_1  go to state 79
    exprlvl_2  go to state 28
    exprlvl_3  go to state 29
    exprlvl_4  go to state 30
    literal    go to state 31
    number     go to state 32


State 64

    5 declaration: type VAR MISC_SEMI .

    $default  reduce using rule 5 (declaration)


State 65

    8 declaration: type TYPE_ARRAY assignment .

    $default  reduce using rule 8 (declaration)


State 66

   15 arrayitems: LIT_CHAR .

    $default  reduce using rule 15 (arrayitems)


State 67

   11 assignment: VAR ASSIGN ARR_LP arraystruct . ARR_RP MISC_SEMI

    ARR_RP  shift, and go to state 80


State 68

   12 arraystruct: arrayitems .
   13            | arrayitems . ARR_SEP arraystruct

    ARR_SEP  shift, and go to state 81

    $default  reduce using rule 12 (arraystruct)


State 69

   14 arrayitems: exprlvl_1 .
   21 exprlvl_1: exprlvl_1 . logicOperator exprlvl_2

    COMP_EQL   shift, and go to state 44
    COMP_LT    shift, and go to state 45
    COMP_LE    shift, and go to state 46
    COMP_GT    shift, and go to state 47
    COMP_GE    shift, and go to state 48
    LOGIC_AND  shift, and go to state 49
    LOGIC_OR   shift, and go to state 50

    $default  reduce using rule 14 (arrayitems)

    logicOperator  go to state 52


State 70

   10 assignment: VAR ASSIGN LIT_CHAR MISC_SEMI .

    $default  reduce using rule 10 (assignment)


State 71

    9 assignment: VAR ASSIGN exprlvl_1 MISC_SEMI .

    $default  reduce using rule 9 (assignment)


State 72

   29 literal: MISC_LP exprlvl_1 MISC_RP .

    $default  reduce using rule 29 (literal)


State 73

    1 program: program . declaration
    2        | program . assignment
    3        | program . controlBlock
   51 controlIf: CTRL_IF exprlvl_1 CTRL_THEN program . controlElif CTRL_END
   52          | CTRL_IF exprlvl_1 CTRL_THEN program . controlElif CTRL_ELSE program CTRL_END

    CONST_DECL   shift, and go to state 3
    VAR          shift, and go to state 4
    TYPE_INT     shift, and go to state 5
    TYPE_CHAR    shift, and go to state 6
    TYPE_BOOL    shift, and go to state 7
    TYPE_FLOAT   shift, and go to state 8
    TYPE_STRING  shift, and go to state 9
    CTRL_IF      shift, and go to state 10
    CTRL_ELIF    shift, and go to state 82
    CTRL_WHILE   shift, and go to state 11
    CTRL_DO      shift, and go to state 12

    $default  reduce using rule 54 (controlElif)

    declaration   go to state 13
    assignment    go to state 14
    type          go to state 15
    controlBlock  go to state 16
    controlIf     go to state 17
    controlElif   go to state 83
    controlWhile  go to state 18


State 74

   21 exprlvl_1: exprlvl_1 logicOperator exprlvl_2 .
   23 exprlvl_2: exprlvl_2 . lineOperator exprlvl_3

    OP_ADD  shift, and go to state 53
    OP_SUB  shift, and go to state 54

    $default  reduce using rule 21 (exprlvl_1)

    lineOperator  go to state 55


State 75

   23 exprlvl_2: exprlvl_2 lineOperator exprlvl_3 .
   25 exprlvl_3: exprlvl_3 . pointOperator exprlvl_4

    OP_MUL  shift, and go to state 56
    OP_DIV  shift, and go to state 57
    OP_MOD  shift, and go to state 58

    $default  reduce using rule 23 (exprlvl_2)

    pointOperator  go to state 59


State 76

   25 exprlvl_3: exprlvl_3 pointOperator exprlvl_4 .
   27 exprlvl_4: exprlvl_4 . potOperator literal

    OP_POT  shift, and go to state 60

    $default  reduce using rule 25 (exprlvl_3)

    potOperator  go to state 61


State 77

   27 exprlvl_4: exprlvl_4 potOperator literal .

    $default  reduce using rule 27 (exprlvl_4)


State 78

    1 program: program . declaration
    2        | program . assignment
    3        | program . controlBlock
   55 controlWhile: CTRL_WHILE exprlvl_1 CTRL_DO program . CTRL_END

    CONST_DECL   shift, and go to state 3
    VAR          shift, and go to state 4
    TYPE_INT     shift, and go to state 5
    TYPE_CHAR    shift, and go to state 6
    TYPE_BOOL    shift, and go to state 7
    TYPE_FLOAT   shift, and go to state 8
    TYPE_STRING  shift, and go to state 9
    CTRL_IF      shift, and go to state 10
    CTRL_END     shift, and go to state 84
    CTRL_WHILE   shift, and go to state 11
    CTRL_DO      shift, and go to state 12

    declaration   go to state 13
    assignment    go to state 14
    type          go to state 15
    controlBlock  go to state 16
    controlIf     go to state 17
    controlWhile  go to state 18


State 79

   21 exprlvl_1: exprlvl_1 . logicOperator exprlvl_2
   55 controlWhile: CTRL_WHILE exprlvl_1 . CTRL_DO program CTRL_END
   56             | CTRL_DO program CTRL_WHILE exprlvl_1 . CTRL_END

    COMP_EQL   shift, and go to state 44
    COMP_LT    shift, and go to state 45
    COMP_LE    shift, and go to state 46
    COMP_GT    shift, and go to state 47
    COMP_GE    shift, and go to state 48
    LOGIC_AND  shift, and go to state 49
    LOGIC_OR   shift, and go to state 50
    CTRL_END   shift, and go to state 85
    CTRL_DO    shift, and go to state 62

    logicOperator  go to state 52


State 80

   11 assignment: VAR ASSIGN ARR_LP arraystruct ARR_RP . MISC_SEMI

    MISC_SEMI  shift, and go to state 86


State 81

   13 arraystruct: arrayitems ARR_SEP . arraystruct

    OP_SUB    shift, and go to state 21
    VAR       shift, and go to state 22
    LIT_INT   shift, and go to state 23
    LIT_BOOL  shift, and go to state 24
    LIT_CHAR  shift, and go to state 66
    LIT_ZERO  shift, and go to state 25
    MISC_LP   shift, and go to state 26

    arraystruct  go to state 87
    arrayitems   go to state 68
    exprlvl_1    go to state 69
    exprlvl_2    go to state 28
    exprlvl_3    go to state 29
    exprlvl_4    go to state 30
    literal      go to state 31
    number       go to state 32


State 82

   53 controlElif: CTRL_ELIF . exprlvl_1 CTRL_THEN program controlElif

    OP_SUB    shift, and go to state 21
    VAR       shift, and go to state 22
    LIT_INT   shift, and go to state 23
    LIT_BOOL  shift, and go to state 24
    LIT_ZERO  shift, and go to state 25
    MISC_LP   shift, and go to state 26

    exprlvl_1  go to state 88
    exprlvl_2  go to state 28
    exprlvl_3  go to state 29
    exprlvl_4  go to state 30
    literal    go to state 31
    number     go to state 32


State 83

   51 controlIf: CTRL_IF exprlvl_1 CTRL_THEN program controlElif . CTRL_END
   52          | CTRL_IF exprlvl_1 CTRL_THEN program controlElif . CTRL_ELSE program CTRL_END

    CTRL_ELSE  shift, and go to state 89
    CTRL_END   shift, and go to state 90


State 84

   55 controlWhile: CTRL_WHILE exprlvl_1 CTRL_DO program CTRL_END .

    $default  reduce using rule 55 (controlWhile)


State 85

   56 controlWhile: CTRL_DO program CTRL_WHILE exprlvl_1 CTRL_END .

    $default  reduce using rule 56 (controlWhile)


State 86

   11 assignment: VAR ASSIGN ARR_LP arraystruct ARR_RP MISC_SEMI .

    $default  reduce using rule 11 (assignment)


State 87

   13 arraystruct: arrayitems ARR_SEP arraystruct .

    $default  reduce using rule 13 (arraystruct)


State 88

   21 exprlvl_1: exprlvl_1 . logicOperator exprlvl_2
   53 controlElif: CTRL_ELIF exprlvl_1 . CTRL_THEN program controlElif

    COMP_EQL   shift, and go to state 44
    COMP_LT    shift, and go to state 45
    COMP_LE    shift, and go to state 46
    COMP_GT    shift, and go to state 47
    COMP_GE    shift, and go to state 48
    LOGIC_AND  shift, and go to state 49
    LOGIC_OR   shift, and go to state 50
    CTRL_THEN  shift, and go to state 91

    logicOperator  go to state 52


State 89

   52 controlIf: CTRL_IF exprlvl_1 CTRL_THEN program controlElif CTRL_ELSE . program CTRL_END

    $default  reduce using rule 4 (program)

    program  go to state 92


State 90

   51 controlIf: CTRL_IF exprlvl_1 CTRL_THEN program controlElif CTRL_END .

    $default  reduce using rule 51 (controlIf)


State 91

   53 controlElif: CTRL_ELIF exprlvl_1 CTRL_THEN . program controlElif

    $default  reduce using rule 4 (program)

    program  go to state 93


State 92

    1 program: program . declaration
    2        | program . assignment
    3        | program . controlBlock
   52 controlIf: CTRL_IF exprlvl_1 CTRL_THEN program controlElif CTRL_ELSE program . CTRL_END

    CONST_DECL   shift, and go to state 3
    VAR          shift, and go to state 4
    TYPE_INT     shift, and go to state 5
    TYPE_CHAR    shift, and go to state 6
    TYPE_BOOL    shift, and go to state 7
    TYPE_FLOAT   shift, and go to state 8
    TYPE_STRING  shift, and go to state 9
    CTRL_IF      shift, and go to state 10
    CTRL_END     shift, and go to state 94
    CTRL_WHILE   shift, and go to state 11
    CTRL_DO      shift, and go to state 12

    declaration   go to state 13
    assignment    go to state 14
    type          go to state 15
    controlBlock  go to state 16
    controlIf     go to state 17
    controlWhile  go to state 18


State 93

    1 program: program . declaration
    2        | program . assignment
    3        | program . controlBlock
   53 controlElif: CTRL_ELIF exprlvl_1 CTRL_THEN program . controlElif

    CONST_DECL   shift, and go to state 3
    VAR          shift, and go to state 4
    TYPE_INT     shift, and go to state 5
    TYPE_CHAR    shift, and go to state 6
    TYPE_BOOL    shift, and go to state 7
    TYPE_FLOAT   shift, and go to state 8
    TYPE_STRING  shift, and go to state 9
    CTRL_IF      shift, and go to state 10
    CTRL_ELIF    shift, and go to state 82
    CTRL_WHILE   shift, and go to state 11
    CTRL_DO      shift, and go to state 12

    $default  reduce using rule 54 (controlElif)

    declaration   go to state 13
    assignment    go to state 14
    type          go to state 15
    controlBlock  go to state 16
    controlIf     go to state 17
    controlElif   go to state 95
    controlWhile  go to state 18


State 94

   52 controlIf: CTRL_IF exprlvl_1 CTRL_THEN program controlElif CTRL_ELSE program CTRL_END .

    $default  reduce using rule 52 (controlIf)


State 95

   53 controlElif: CTRL_ELIF exprlvl_1 CTRL_THEN program controlElif .

    $default  reduce using rule 53 (controlElif)
