Terminals unused in grammar

    ERROR


Grammar

    0 $accept: program $end

    1 program: program declaration
    2        | program assignment
    3        | program controlBlock
    4        | program DEBUG MISC_LP LIT_STRING MISC_RP MISC_SEMI
    5        | %empty

    6 declaration: type VAR MISC_SEMI
    7            | type assignment
    8            | CONST_DECL type assignment
    9            | type TYPE_ARRAY assignment

   10 assignment: VAR ASSIGN exprlvl_1 MISC_SEMI
   11           | VAR ASSIGN LIT_CHAR MISC_SEMI
   12           | VAR ASSIGN LIT_STRING MISC_SEMI
   13           | VAR ASSIGN ARR_LP arraystruct ARR_RP MISC_SEMI

   14 arraystruct: arrayitem
   15            | arrayitem ARR_SEP arraystruct

   16 arrayitem: exprlvl_1
   17          | LIT_CHAR
   18          | LIT_STRING

   19 type: TYPE_INT
   20     | TYPE_FLOAT
   21     | TYPE_CHAR
   22     | TYPE_STRING
   23     | TYPE_BOOL

   24 exprlvl_1: exprlvl_1 logicOperator exprlvl_2
   25          | exprlvl_2

   26 exprlvl_2: exprlvl_2 lineOperator exprlvl_3
   27          | exprlvl_3

   28 exprlvl_3: exprlvl_3 pointOperator exprlvl_4
   29          | exprlvl_4

   30 exprlvl_4: exprlvl_4 potOperator literal
   31          | literal

   32 literal: MISC_LP exprlvl_1 MISC_RP
   33        | LOGIC_NOT MISC_LP exprlvl_1 MISC_RP
   34        | LIT_BOOL
   35        | number
   36        | VAR
   37        | OP_SUB VAR

   38 number: LIT_INT
   39       | LIT_FLOAT
   40       | LIT_ZERO
   41       | OP_SUB LIT_INT
   42       | OP_SUB LIT_FLOAT

   43 lineOperator: OP_ADD
   44             | OP_SUB

   45 pointOperator: OP_MUL
   46              | OP_DIV
   47              | OP_MOD

   48 potOperator: OP_POT

   49 logicOperator: COMP_EQL
   50              | COMP_LT
   51              | COMP_LE
   52              | COMP_GT
   53              | COMP_GE
   54              | LOGIC_AND
   55              | LOGIC_OR

   56 controlBlock: controlIf
   57             | controlWhile

   58 controlIf: CTRL_IF exprlvl_1 CTRL_THEN program controlElif CTRL_END
   59          | CTRL_IF exprlvl_1 CTRL_THEN program controlElif CTRL_ELSE program CTRL_END

   60 controlElif: CTRL_ELIF exprlvl_1 CTRL_THEN program controlElif
   61            | %empty

   62 controlWhile: CTRL_WHILE exprlvl_1 CTRL_DO program CTRL_END
   63             | CTRL_DO program CTRL_WHILE exprlvl_1 CTRL_END


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    OP_ADD (258) 43
    OP_SUB (259) 37 41 42 44
    OP_MUL (260) 45
    OP_DIV (261) 46
    OP_POT (262) 48
    OP_MOD (263) 47
    CONST_DECL (264) 8
    ASSIGN (265) 10 11 12 13
    COMP_EQL (266) 49
    COMP_LT (267) 50
    COMP_LE (268) 51
    COMP_GT (269) 52
    COMP_GE (270) 53
    LOGIC_AND (271) 54
    LOGIC_OR (272) 55
    LOGIC_NOT (273) 33
    VAR <content> (274) 6 10 11 12 13 36 37
    TYPE_INT (275) 19
    TYPE_CHAR (276) 21
    TYPE_BOOL (277) 23
    TYPE_FLOAT (278) 20
    TYPE_STRING (279) 22
    TYPE_ARRAY (280) 9
    ARR_LP (281) 13
    ARR_RP (282) 13
    ARR_SEP (283) 15
    LIT_INT <content> (284) 38 41
    LIT_BOOL <content> (285) 34
    LIT_CHAR <content> (286) 11 17
    LIT_ZERO <content> (287) 40
    LIT_STRING <content> (288) 4 12 18
    LIT_FLOAT <content> (289) 39 42
    CTRL_IF (290) 58 59
    CTRL_THEN (291) 58 59 60
    CTRL_ELSE (292) 59
    CTRL_ELIF (293) 60
    CTRL_END (294) 58 59 62 63
    CTRL_WHILE (295) 62 63
    CTRL_DO (296) 62 63
    MISC_LP (297) 4 32 33
    MISC_RP (298) 4 32 33
    MISC_SEMI (299) 4 6 10 11 12 13
    DEBUG (300) 4
    ERROR (301)


Nonterminals, with rules where they appear

    $accept (47)
        on left: 0
    program <content> (48)
        on left: 1 2 3 4 5
        on right: 0 1 2 3 4 58 59 60 62 63
    declaration <content> (49)
        on left: 6 7 8 9
        on right: 1
    assignment <content> (50)
        on left: 10 11 12 13
        on right: 2 7 8 9
    arraystruct <content> (51)
        on left: 14 15
        on right: 13 15
    arrayitem <content> (52)
        on left: 16 17 18
        on right: 14 15
    type <type> (53)
        on left: 19 20 21 22 23
        on right: 6 7 8 9
    exprlvl_1 <content> (54)
        on left: 24 25
        on right: 10 16 24 32 33 58 59 60 62 63
    exprlvl_2 <content> (55)
        on left: 26 27
        on right: 24 25 26
    exprlvl_3 <content> (56)
        on left: 28 29
        on right: 26 27 28
    exprlvl_4 <content> (57)
        on left: 30 31
        on right: 28 29 30
    literal <content> (58)
        on left: 32 33 34 35 36 37
        on right: 30 31
    number <content> (59)
        on left: 38 39 40 41 42
        on right: 35
    lineOperator <opString> (60)
        on left: 43 44
        on right: 26
    pointOperator <opString> (61)
        on left: 45 46 47
        on right: 28
    potOperator <opString> (62)
        on left: 48
        on right: 30
    logicOperator <opString> (63)
        on left: 49 50 51 52 53 54 55
        on right: 24
    controlBlock (64)
        on left: 56 57
        on right: 3
    controlIf (65)
        on left: 58 59
        on right: 56
    controlElif (66)
        on left: 60 61
        on right: 58 59 60
    controlWhile (67)
        on left: 62 63
        on right: 57


State 0

    0 $accept: . program $end

    $default  reduce using rule 5 (program)

    program  go to state 1


State 1

    0 $accept: program . $end
    1 program: program . declaration
    2        | program . assignment
    3        | program . controlBlock
    4        | program . DEBUG MISC_LP LIT_STRING MISC_RP MISC_SEMI

    $end         shift, and go to state 2
    CONST_DECL   shift, and go to state 3
    VAR          shift, and go to state 4
    TYPE_INT     shift, and go to state 5
    TYPE_CHAR    shift, and go to state 6
    TYPE_BOOL    shift, and go to state 7
    TYPE_FLOAT   shift, and go to state 8
    TYPE_STRING  shift, and go to state 9
    CTRL_IF      shift, and go to state 10
    CTRL_WHILE   shift, and go to state 11
    CTRL_DO      shift, and go to state 12
    DEBUG        shift, and go to state 13

    declaration   go to state 14
    assignment    go to state 15
    type          go to state 16
    controlBlock  go to state 17
    controlIf     go to state 18
    controlWhile  go to state 19


State 2

    0 $accept: program $end .

    $default  accept


State 3

    8 declaration: CONST_DECL . type assignment

    TYPE_INT     shift, and go to state 5
    TYPE_CHAR    shift, and go to state 6
    TYPE_BOOL    shift, and go to state 7
    TYPE_FLOAT   shift, and go to state 8
    TYPE_STRING  shift, and go to state 9

    type  go to state 20


State 4

   10 assignment: VAR . ASSIGN exprlvl_1 MISC_SEMI
   11           | VAR . ASSIGN LIT_CHAR MISC_SEMI
   12           | VAR . ASSIGN LIT_STRING MISC_SEMI
   13           | VAR . ASSIGN ARR_LP arraystruct ARR_RP MISC_SEMI

    ASSIGN  shift, and go to state 21


State 5

   19 type: TYPE_INT .

    $default  reduce using rule 19 (type)


State 6

   21 type: TYPE_CHAR .

    $default  reduce using rule 21 (type)


State 7

   23 type: TYPE_BOOL .

    $default  reduce using rule 23 (type)


State 8

   20 type: TYPE_FLOAT .

    $default  reduce using rule 20 (type)


State 9

   22 type: TYPE_STRING .

    $default  reduce using rule 22 (type)


State 10

   58 controlIf: CTRL_IF . exprlvl_1 CTRL_THEN program controlElif CTRL_END
   59          | CTRL_IF . exprlvl_1 CTRL_THEN program controlElif CTRL_ELSE program CTRL_END

    OP_SUB     shift, and go to state 22
    LOGIC_NOT  shift, and go to state 23
    VAR        shift, and go to state 24
    LIT_INT    shift, and go to state 25
    LIT_BOOL   shift, and go to state 26
    LIT_ZERO   shift, and go to state 27
    LIT_FLOAT  shift, and go to state 28
    MISC_LP    shift, and go to state 29

    exprlvl_1  go to state 30
    exprlvl_2  go to state 31
    exprlvl_3  go to state 32
    exprlvl_4  go to state 33
    literal    go to state 34
    number     go to state 35


State 11

   62 controlWhile: CTRL_WHILE . exprlvl_1 CTRL_DO program CTRL_END

    OP_SUB     shift, and go to state 22
    LOGIC_NOT  shift, and go to state 23
    VAR        shift, and go to state 24
    LIT_INT    shift, and go to state 25
    LIT_BOOL   shift, and go to state 26
    LIT_ZERO   shift, and go to state 27
    LIT_FLOAT  shift, and go to state 28
    MISC_LP    shift, and go to state 29

    exprlvl_1  go to state 36
    exprlvl_2  go to state 31
    exprlvl_3  go to state 32
    exprlvl_4  go to state 33
    literal    go to state 34
    number     go to state 35


State 12

   63 controlWhile: CTRL_DO . program CTRL_WHILE exprlvl_1 CTRL_END

    $default  reduce using rule 5 (program)

    program  go to state 37


State 13

    4 program: program DEBUG . MISC_LP LIT_STRING MISC_RP MISC_SEMI

    MISC_LP  shift, and go to state 38


State 14

    1 program: program declaration .

    $default  reduce using rule 1 (program)


State 15

    2 program: program assignment .

    $default  reduce using rule 2 (program)


State 16

    6 declaration: type . VAR MISC_SEMI
    7            | type . assignment
    9            | type . TYPE_ARRAY assignment

    VAR         shift, and go to state 39
    TYPE_ARRAY  shift, and go to state 40

    assignment  go to state 41


State 17

    3 program: program controlBlock .

    $default  reduce using rule 3 (program)


State 18

   56 controlBlock: controlIf .

    $default  reduce using rule 56 (controlBlock)


State 19

   57 controlBlock: controlWhile .

    $default  reduce using rule 57 (controlBlock)


State 20

    8 declaration: CONST_DECL type . assignment

    VAR  shift, and go to state 4

    assignment  go to state 42


State 21

   10 assignment: VAR ASSIGN . exprlvl_1 MISC_SEMI
   11           | VAR ASSIGN . LIT_CHAR MISC_SEMI
   12           | VAR ASSIGN . LIT_STRING MISC_SEMI
   13           | VAR ASSIGN . ARR_LP arraystruct ARR_RP MISC_SEMI

    OP_SUB      shift, and go to state 22
    LOGIC_NOT   shift, and go to state 23
    VAR         shift, and go to state 24
    ARR_LP      shift, and go to state 43
    LIT_INT     shift, and go to state 25
    LIT_BOOL    shift, and go to state 26
    LIT_CHAR    shift, and go to state 44
    LIT_ZERO    shift, and go to state 27
    LIT_STRING  shift, and go to state 45
    LIT_FLOAT   shift, and go to state 28
    MISC_LP     shift, and go to state 29

    exprlvl_1  go to state 46
    exprlvl_2  go to state 31
    exprlvl_3  go to state 32
    exprlvl_4  go to state 33
    literal    go to state 34
    number     go to state 35


State 22

   37 literal: OP_SUB . VAR
   41 number: OP_SUB . LIT_INT
   42       | OP_SUB . LIT_FLOAT

    VAR        shift, and go to state 47
    LIT_INT    shift, and go to state 48
    LIT_FLOAT  shift, and go to state 49


State 23

   33 literal: LOGIC_NOT . MISC_LP exprlvl_1 MISC_RP

    MISC_LP  shift, and go to state 50


State 24

   36 literal: VAR .

    $default  reduce using rule 36 (literal)


State 25

   38 number: LIT_INT .

    $default  reduce using rule 38 (number)


State 26

   34 literal: LIT_BOOL .

    $default  reduce using rule 34 (literal)


State 27

   40 number: LIT_ZERO .

    $default  reduce using rule 40 (number)


State 28

   39 number: LIT_FLOAT .

    $default  reduce using rule 39 (number)


State 29

   32 literal: MISC_LP . exprlvl_1 MISC_RP

    OP_SUB     shift, and go to state 22
    LOGIC_NOT  shift, and go to state 23
    VAR        shift, and go to state 24
    LIT_INT    shift, and go to state 25
    LIT_BOOL   shift, and go to state 26
    LIT_ZERO   shift, and go to state 27
    LIT_FLOAT  shift, and go to state 28
    MISC_LP    shift, and go to state 29

    exprlvl_1  go to state 51
    exprlvl_2  go to state 31
    exprlvl_3  go to state 32
    exprlvl_4  go to state 33
    literal    go to state 34
    number     go to state 35


State 30

   24 exprlvl_1: exprlvl_1 . logicOperator exprlvl_2
   58 controlIf: CTRL_IF exprlvl_1 . CTRL_THEN program controlElif CTRL_END
   59          | CTRL_IF exprlvl_1 . CTRL_THEN program controlElif CTRL_ELSE program CTRL_END

    COMP_EQL   shift, and go to state 52
    COMP_LT    shift, and go to state 53
    COMP_LE    shift, and go to state 54
    COMP_GT    shift, and go to state 55
    COMP_GE    shift, and go to state 56
    LOGIC_AND  shift, and go to state 57
    LOGIC_OR   shift, and go to state 58
    CTRL_THEN  shift, and go to state 59

    logicOperator  go to state 60


State 31

   25 exprlvl_1: exprlvl_2 .
   26 exprlvl_2: exprlvl_2 . lineOperator exprlvl_3

    OP_ADD  shift, and go to state 61
    OP_SUB  shift, and go to state 62

    $default  reduce using rule 25 (exprlvl_1)

    lineOperator  go to state 63


State 32

   27 exprlvl_2: exprlvl_3 .
   28 exprlvl_3: exprlvl_3 . pointOperator exprlvl_4

    OP_MUL  shift, and go to state 64
    OP_DIV  shift, and go to state 65
    OP_MOD  shift, and go to state 66

    $default  reduce using rule 27 (exprlvl_2)

    pointOperator  go to state 67


State 33

   29 exprlvl_3: exprlvl_4 .
   30 exprlvl_4: exprlvl_4 . potOperator literal

    OP_POT  shift, and go to state 68

    $default  reduce using rule 29 (exprlvl_3)

    potOperator  go to state 69


State 34

   31 exprlvl_4: literal .

    $default  reduce using rule 31 (exprlvl_4)


State 35

   35 literal: number .

    $default  reduce using rule 35 (literal)


State 36

   24 exprlvl_1: exprlvl_1 . logicOperator exprlvl_2
   62 controlWhile: CTRL_WHILE exprlvl_1 . CTRL_DO program CTRL_END

    COMP_EQL   shift, and go to state 52
    COMP_LT    shift, and go to state 53
    COMP_LE    shift, and go to state 54
    COMP_GT    shift, and go to state 55
    COMP_GE    shift, and go to state 56
    LOGIC_AND  shift, and go to state 57
    LOGIC_OR   shift, and go to state 58
    CTRL_DO    shift, and go to state 70

    logicOperator  go to state 60


State 37

    1 program: program . declaration
    2        | program . assignment
    3        | program . controlBlock
    4        | program . DEBUG MISC_LP LIT_STRING MISC_RP MISC_SEMI
   63 controlWhile: CTRL_DO program . CTRL_WHILE exprlvl_1 CTRL_END

    CONST_DECL   shift, and go to state 3
    VAR          shift, and go to state 4
    TYPE_INT     shift, and go to state 5
    TYPE_CHAR    shift, and go to state 6
    TYPE_BOOL    shift, and go to state 7
    TYPE_FLOAT   shift, and go to state 8
    TYPE_STRING  shift, and go to state 9
    CTRL_IF      shift, and go to state 10
    CTRL_WHILE   shift, and go to state 71
    CTRL_DO      shift, and go to state 12
    DEBUG        shift, and go to state 13

    declaration   go to state 14
    assignment    go to state 15
    type          go to state 16
    controlBlock  go to state 17
    controlIf     go to state 18
    controlWhile  go to state 19


State 38

    4 program: program DEBUG MISC_LP . LIT_STRING MISC_RP MISC_SEMI

    LIT_STRING  shift, and go to state 72


State 39

    6 declaration: type VAR . MISC_SEMI
   10 assignment: VAR . ASSIGN exprlvl_1 MISC_SEMI
   11           | VAR . ASSIGN LIT_CHAR MISC_SEMI
   12           | VAR . ASSIGN LIT_STRING MISC_SEMI
   13           | VAR . ASSIGN ARR_LP arraystruct ARR_RP MISC_SEMI

    ASSIGN     shift, and go to state 21
    MISC_SEMI  shift, and go to state 73


State 40

    9 declaration: type TYPE_ARRAY . assignment

    VAR  shift, and go to state 4

    assignment  go to state 74


State 41

    7 declaration: type assignment .

    $default  reduce using rule 7 (declaration)


State 42

    8 declaration: CONST_DECL type assignment .

    $default  reduce using rule 8 (declaration)


State 43

   13 assignment: VAR ASSIGN ARR_LP . arraystruct ARR_RP MISC_SEMI

    OP_SUB      shift, and go to state 22
    LOGIC_NOT   shift, and go to state 23
    VAR         shift, and go to state 24
    LIT_INT     shift, and go to state 25
    LIT_BOOL    shift, and go to state 26
    LIT_CHAR    shift, and go to state 75
    LIT_ZERO    shift, and go to state 27
    LIT_STRING  shift, and go to state 76
    LIT_FLOAT   shift, and go to state 28
    MISC_LP     shift, and go to state 29

    arraystruct  go to state 77
    arrayitem    go to state 78
    exprlvl_1    go to state 79
    exprlvl_2    go to state 31
    exprlvl_3    go to state 32
    exprlvl_4    go to state 33
    literal      go to state 34
    number       go to state 35


State 44

   11 assignment: VAR ASSIGN LIT_CHAR . MISC_SEMI

    MISC_SEMI  shift, and go to state 80


State 45

   12 assignment: VAR ASSIGN LIT_STRING . MISC_SEMI

    MISC_SEMI  shift, and go to state 81


State 46

   10 assignment: VAR ASSIGN exprlvl_1 . MISC_SEMI
   24 exprlvl_1: exprlvl_1 . logicOperator exprlvl_2

    COMP_EQL   shift, and go to state 52
    COMP_LT    shift, and go to state 53
    COMP_LE    shift, and go to state 54
    COMP_GT    shift, and go to state 55
    COMP_GE    shift, and go to state 56
    LOGIC_AND  shift, and go to state 57
    LOGIC_OR   shift, and go to state 58
    MISC_SEMI  shift, and go to state 82

    logicOperator  go to state 60


State 47

   37 literal: OP_SUB VAR .

    $default  reduce using rule 37 (literal)


State 48

   41 number: OP_SUB LIT_INT .

    $default  reduce using rule 41 (number)


State 49

   42 number: OP_SUB LIT_FLOAT .

    $default  reduce using rule 42 (number)


State 50

   33 literal: LOGIC_NOT MISC_LP . exprlvl_1 MISC_RP

    OP_SUB     shift, and go to state 22
    LOGIC_NOT  shift, and go to state 23
    VAR        shift, and go to state 24
    LIT_INT    shift, and go to state 25
    LIT_BOOL   shift, and go to state 26
    LIT_ZERO   shift, and go to state 27
    LIT_FLOAT  shift, and go to state 28
    MISC_LP    shift, and go to state 29

    exprlvl_1  go to state 83
    exprlvl_2  go to state 31
    exprlvl_3  go to state 32
    exprlvl_4  go to state 33
    literal    go to state 34
    number     go to state 35


State 51

   24 exprlvl_1: exprlvl_1 . logicOperator exprlvl_2
   32 literal: MISC_LP exprlvl_1 . MISC_RP

    COMP_EQL   shift, and go to state 52
    COMP_LT    shift, and go to state 53
    COMP_LE    shift, and go to state 54
    COMP_GT    shift, and go to state 55
    COMP_GE    shift, and go to state 56
    LOGIC_AND  shift, and go to state 57
    LOGIC_OR   shift, and go to state 58
    MISC_RP    shift, and go to state 84

    logicOperator  go to state 60


State 52

   49 logicOperator: COMP_EQL .

    $default  reduce using rule 49 (logicOperator)


State 53

   50 logicOperator: COMP_LT .

    $default  reduce using rule 50 (logicOperator)


State 54

   51 logicOperator: COMP_LE .

    $default  reduce using rule 51 (logicOperator)


State 55

   52 logicOperator: COMP_GT .

    $default  reduce using rule 52 (logicOperator)


State 56

   53 logicOperator: COMP_GE .

    $default  reduce using rule 53 (logicOperator)


State 57

   54 logicOperator: LOGIC_AND .

    $default  reduce using rule 54 (logicOperator)


State 58

   55 logicOperator: LOGIC_OR .

    $default  reduce using rule 55 (logicOperator)


State 59

   58 controlIf: CTRL_IF exprlvl_1 CTRL_THEN . program controlElif CTRL_END
   59          | CTRL_IF exprlvl_1 CTRL_THEN . program controlElif CTRL_ELSE program CTRL_END

    $default  reduce using rule 5 (program)

    program  go to state 85


State 60

   24 exprlvl_1: exprlvl_1 logicOperator . exprlvl_2

    OP_SUB     shift, and go to state 22
    LOGIC_NOT  shift, and go to state 23
    VAR        shift, and go to state 24
    LIT_INT    shift, and go to state 25
    LIT_BOOL   shift, and go to state 26
    LIT_ZERO   shift, and go to state 27
    LIT_FLOAT  shift, and go to state 28
    MISC_LP    shift, and go to state 29

    exprlvl_2  go to state 86
    exprlvl_3  go to state 32
    exprlvl_4  go to state 33
    literal    go to state 34
    number     go to state 35


State 61

   43 lineOperator: OP_ADD .

    $default  reduce using rule 43 (lineOperator)


State 62

   44 lineOperator: OP_SUB .

    $default  reduce using rule 44 (lineOperator)


State 63

   26 exprlvl_2: exprlvl_2 lineOperator . exprlvl_3

    OP_SUB     shift, and go to state 22
    LOGIC_NOT  shift, and go to state 23
    VAR        shift, and go to state 24
    LIT_INT    shift, and go to state 25
    LIT_BOOL   shift, and go to state 26
    LIT_ZERO   shift, and go to state 27
    LIT_FLOAT  shift, and go to state 28
    MISC_LP    shift, and go to state 29

    exprlvl_3  go to state 87
    exprlvl_4  go to state 33
    literal    go to state 34
    number     go to state 35


State 64

   45 pointOperator: OP_MUL .

    $default  reduce using rule 45 (pointOperator)


State 65

   46 pointOperator: OP_DIV .

    $default  reduce using rule 46 (pointOperator)


State 66

   47 pointOperator: OP_MOD .

    $default  reduce using rule 47 (pointOperator)


State 67

   28 exprlvl_3: exprlvl_3 pointOperator . exprlvl_4

    OP_SUB     shift, and go to state 22
    LOGIC_NOT  shift, and go to state 23
    VAR        shift, and go to state 24
    LIT_INT    shift, and go to state 25
    LIT_BOOL   shift, and go to state 26
    LIT_ZERO   shift, and go to state 27
    LIT_FLOAT  shift, and go to state 28
    MISC_LP    shift, and go to state 29

    exprlvl_4  go to state 88
    literal    go to state 34
    number     go to state 35


State 68

   48 potOperator: OP_POT .

    $default  reduce using rule 48 (potOperator)


State 69

   30 exprlvl_4: exprlvl_4 potOperator . literal

    OP_SUB     shift, and go to state 22
    LOGIC_NOT  shift, and go to state 23
    VAR        shift, and go to state 24
    LIT_INT    shift, and go to state 25
    LIT_BOOL   shift, and go to state 26
    LIT_ZERO   shift, and go to state 27
    LIT_FLOAT  shift, and go to state 28
    MISC_LP    shift, and go to state 29

    literal  go to state 89
    number   go to state 35


State 70

   62 controlWhile: CTRL_WHILE exprlvl_1 CTRL_DO . program CTRL_END

    $default  reduce using rule 5 (program)

    program  go to state 90


State 71

   62 controlWhile: CTRL_WHILE . exprlvl_1 CTRL_DO program CTRL_END
   63             | CTRL_DO program CTRL_WHILE . exprlvl_1 CTRL_END

    OP_SUB     shift, and go to state 22
    LOGIC_NOT  shift, and go to state 23
    VAR        shift, and go to state 24
    LIT_INT    shift, and go to state 25
    LIT_BOOL   shift, and go to state 26
    LIT_ZERO   shift, and go to state 27
    LIT_FLOAT  shift, and go to state 28
    MISC_LP    shift, and go to state 29

    exprlvl_1  go to state 91
    exprlvl_2  go to state 31
    exprlvl_3  go to state 32
    exprlvl_4  go to state 33
    literal    go to state 34
    number     go to state 35


State 72

    4 program: program DEBUG MISC_LP LIT_STRING . MISC_RP MISC_SEMI

    MISC_RP  shift, and go to state 92


State 73

    6 declaration: type VAR MISC_SEMI .

    $default  reduce using rule 6 (declaration)


State 74

    9 declaration: type TYPE_ARRAY assignment .

    $default  reduce using rule 9 (declaration)


State 75

   17 arrayitem: LIT_CHAR .

    $default  reduce using rule 17 (arrayitem)


State 76

   18 arrayitem: LIT_STRING .

    $default  reduce using rule 18 (arrayitem)


State 77

   13 assignment: VAR ASSIGN ARR_LP arraystruct . ARR_RP MISC_SEMI

    ARR_RP  shift, and go to state 93


State 78

   14 arraystruct: arrayitem .
   15            | arrayitem . ARR_SEP arraystruct

    ARR_SEP  shift, and go to state 94

    $default  reduce using rule 14 (arraystruct)


State 79

   16 arrayitem: exprlvl_1 .
   24 exprlvl_1: exprlvl_1 . logicOperator exprlvl_2

    COMP_EQL   shift, and go to state 52
    COMP_LT    shift, and go to state 53
    COMP_LE    shift, and go to state 54
    COMP_GT    shift, and go to state 55
    COMP_GE    shift, and go to state 56
    LOGIC_AND  shift, and go to state 57
    LOGIC_OR   shift, and go to state 58

    $default  reduce using rule 16 (arrayitem)

    logicOperator  go to state 60


State 80

   11 assignment: VAR ASSIGN LIT_CHAR MISC_SEMI .

    $default  reduce using rule 11 (assignment)


State 81

   12 assignment: VAR ASSIGN LIT_STRING MISC_SEMI .

    $default  reduce using rule 12 (assignment)


State 82

   10 assignment: VAR ASSIGN exprlvl_1 MISC_SEMI .

    $default  reduce using rule 10 (assignment)


State 83

   24 exprlvl_1: exprlvl_1 . logicOperator exprlvl_2
   33 literal: LOGIC_NOT MISC_LP exprlvl_1 . MISC_RP

    COMP_EQL   shift, and go to state 52
    COMP_LT    shift, and go to state 53
    COMP_LE    shift, and go to state 54
    COMP_GT    shift, and go to state 55
    COMP_GE    shift, and go to state 56
    LOGIC_AND  shift, and go to state 57
    LOGIC_OR   shift, and go to state 58
    MISC_RP    shift, and go to state 95

    logicOperator  go to state 60


State 84

   32 literal: MISC_LP exprlvl_1 MISC_RP .

    $default  reduce using rule 32 (literal)


State 85

    1 program: program . declaration
    2        | program . assignment
    3        | program . controlBlock
    4        | program . DEBUG MISC_LP LIT_STRING MISC_RP MISC_SEMI
   58 controlIf: CTRL_IF exprlvl_1 CTRL_THEN program . controlElif CTRL_END
   59          | CTRL_IF exprlvl_1 CTRL_THEN program . controlElif CTRL_ELSE program CTRL_END

    CONST_DECL   shift, and go to state 3
    VAR          shift, and go to state 4
    TYPE_INT     shift, and go to state 5
    TYPE_CHAR    shift, and go to state 6
    TYPE_BOOL    shift, and go to state 7
    TYPE_FLOAT   shift, and go to state 8
    TYPE_STRING  shift, and go to state 9
    CTRL_IF      shift, and go to state 10
    CTRL_ELIF    shift, and go to state 96
    CTRL_WHILE   shift, and go to state 11
    CTRL_DO      shift, and go to state 12
    DEBUG        shift, and go to state 13

    $default  reduce using rule 61 (controlElif)

    declaration   go to state 14
    assignment    go to state 15
    type          go to state 16
    controlBlock  go to state 17
    controlIf     go to state 18
    controlElif   go to state 97
    controlWhile  go to state 19


State 86

   24 exprlvl_1: exprlvl_1 logicOperator exprlvl_2 .
   26 exprlvl_2: exprlvl_2 . lineOperator exprlvl_3

    OP_ADD  shift, and go to state 61
    OP_SUB  shift, and go to state 62

    $default  reduce using rule 24 (exprlvl_1)

    lineOperator  go to state 63


State 87

   26 exprlvl_2: exprlvl_2 lineOperator exprlvl_3 .
   28 exprlvl_3: exprlvl_3 . pointOperator exprlvl_4

    OP_MUL  shift, and go to state 64
    OP_DIV  shift, and go to state 65
    OP_MOD  shift, and go to state 66

    $default  reduce using rule 26 (exprlvl_2)

    pointOperator  go to state 67


State 88

   28 exprlvl_3: exprlvl_3 pointOperator exprlvl_4 .
   30 exprlvl_4: exprlvl_4 . potOperator literal

    OP_POT  shift, and go to state 68

    $default  reduce using rule 28 (exprlvl_3)

    potOperator  go to state 69


State 89

   30 exprlvl_4: exprlvl_4 potOperator literal .

    $default  reduce using rule 30 (exprlvl_4)


State 90

    1 program: program . declaration
    2        | program . assignment
    3        | program . controlBlock
    4        | program . DEBUG MISC_LP LIT_STRING MISC_RP MISC_SEMI
   62 controlWhile: CTRL_WHILE exprlvl_1 CTRL_DO program . CTRL_END

    CONST_DECL   shift, and go to state 3
    VAR          shift, and go to state 4
    TYPE_INT     shift, and go to state 5
    TYPE_CHAR    shift, and go to state 6
    TYPE_BOOL    shift, and go to state 7
    TYPE_FLOAT   shift, and go to state 8
    TYPE_STRING  shift, and go to state 9
    CTRL_IF      shift, and go to state 10
    CTRL_END     shift, and go to state 98
    CTRL_WHILE   shift, and go to state 11
    CTRL_DO      shift, and go to state 12
    DEBUG        shift, and go to state 13

    declaration   go to state 14
    assignment    go to state 15
    type          go to state 16
    controlBlock  go to state 17
    controlIf     go to state 18
    controlWhile  go to state 19


State 91

   24 exprlvl_1: exprlvl_1 . logicOperator exprlvl_2
   62 controlWhile: CTRL_WHILE exprlvl_1 . CTRL_DO program CTRL_END
   63             | CTRL_DO program CTRL_WHILE exprlvl_1 . CTRL_END

    COMP_EQL   shift, and go to state 52
    COMP_LT    shift, and go to state 53
    COMP_LE    shift, and go to state 54
    COMP_GT    shift, and go to state 55
    COMP_GE    shift, and go to state 56
    LOGIC_AND  shift, and go to state 57
    LOGIC_OR   shift, and go to state 58
    CTRL_END   shift, and go to state 99
    CTRL_DO    shift, and go to state 70

    logicOperator  go to state 60


State 92

    4 program: program DEBUG MISC_LP LIT_STRING MISC_RP . MISC_SEMI

    MISC_SEMI  shift, and go to state 100


State 93

   13 assignment: VAR ASSIGN ARR_LP arraystruct ARR_RP . MISC_SEMI

    MISC_SEMI  shift, and go to state 101


State 94

   15 arraystruct: arrayitem ARR_SEP . arraystruct

    OP_SUB      shift, and go to state 22
    LOGIC_NOT   shift, and go to state 23
    VAR         shift, and go to state 24
    LIT_INT     shift, and go to state 25
    LIT_BOOL    shift, and go to state 26
    LIT_CHAR    shift, and go to state 75
    LIT_ZERO    shift, and go to state 27
    LIT_STRING  shift, and go to state 76
    LIT_FLOAT   shift, and go to state 28
    MISC_LP     shift, and go to state 29

    arraystruct  go to state 102
    arrayitem    go to state 78
    exprlvl_1    go to state 79
    exprlvl_2    go to state 31
    exprlvl_3    go to state 32
    exprlvl_4    go to state 33
    literal      go to state 34
    number       go to state 35


State 95

   33 literal: LOGIC_NOT MISC_LP exprlvl_1 MISC_RP .

    $default  reduce using rule 33 (literal)


State 96

   60 controlElif: CTRL_ELIF . exprlvl_1 CTRL_THEN program controlElif

    OP_SUB     shift, and go to state 22
    LOGIC_NOT  shift, and go to state 23
    VAR        shift, and go to state 24
    LIT_INT    shift, and go to state 25
    LIT_BOOL   shift, and go to state 26
    LIT_ZERO   shift, and go to state 27
    LIT_FLOAT  shift, and go to state 28
    MISC_LP    shift, and go to state 29

    exprlvl_1  go to state 103
    exprlvl_2  go to state 31
    exprlvl_3  go to state 32
    exprlvl_4  go to state 33
    literal    go to state 34
    number     go to state 35


State 97

   58 controlIf: CTRL_IF exprlvl_1 CTRL_THEN program controlElif . CTRL_END
   59          | CTRL_IF exprlvl_1 CTRL_THEN program controlElif . CTRL_ELSE program CTRL_END

    CTRL_ELSE  shift, and go to state 104
    CTRL_END   shift, and go to state 105


State 98

   62 controlWhile: CTRL_WHILE exprlvl_1 CTRL_DO program CTRL_END .

    $default  reduce using rule 62 (controlWhile)


State 99

   63 controlWhile: CTRL_DO program CTRL_WHILE exprlvl_1 CTRL_END .

    $default  reduce using rule 63 (controlWhile)


State 100

    4 program: program DEBUG MISC_LP LIT_STRING MISC_RP MISC_SEMI .

    $default  reduce using rule 4 (program)


State 101

   13 assignment: VAR ASSIGN ARR_LP arraystruct ARR_RP MISC_SEMI .

    $default  reduce using rule 13 (assignment)


State 102

   15 arraystruct: arrayitem ARR_SEP arraystruct .

    $default  reduce using rule 15 (arraystruct)


State 103

   24 exprlvl_1: exprlvl_1 . logicOperator exprlvl_2
   60 controlElif: CTRL_ELIF exprlvl_1 . CTRL_THEN program controlElif

    COMP_EQL   shift, and go to state 52
    COMP_LT    shift, and go to state 53
    COMP_LE    shift, and go to state 54
    COMP_GT    shift, and go to state 55
    COMP_GE    shift, and go to state 56
    LOGIC_AND  shift, and go to state 57
    LOGIC_OR   shift, and go to state 58
    CTRL_THEN  shift, and go to state 106

    logicOperator  go to state 60


State 104

   59 controlIf: CTRL_IF exprlvl_1 CTRL_THEN program controlElif CTRL_ELSE . program CTRL_END

    $default  reduce using rule 5 (program)

    program  go to state 107


State 105

   58 controlIf: CTRL_IF exprlvl_1 CTRL_THEN program controlElif CTRL_END .

    $default  reduce using rule 58 (controlIf)


State 106

   60 controlElif: CTRL_ELIF exprlvl_1 CTRL_THEN . program controlElif

    $default  reduce using rule 5 (program)

    program  go to state 108


State 107

    1 program: program . declaration
    2        | program . assignment
    3        | program . controlBlock
    4        | program . DEBUG MISC_LP LIT_STRING MISC_RP MISC_SEMI
   59 controlIf: CTRL_IF exprlvl_1 CTRL_THEN program controlElif CTRL_ELSE program . CTRL_END

    CONST_DECL   shift, and go to state 3
    VAR          shift, and go to state 4
    TYPE_INT     shift, and go to state 5
    TYPE_CHAR    shift, and go to state 6
    TYPE_BOOL    shift, and go to state 7
    TYPE_FLOAT   shift, and go to state 8
    TYPE_STRING  shift, and go to state 9
    CTRL_IF      shift, and go to state 10
    CTRL_END     shift, and go to state 109
    CTRL_WHILE   shift, and go to state 11
    CTRL_DO      shift, and go to state 12
    DEBUG        shift, and go to state 13

    declaration   go to state 14
    assignment    go to state 15
    type          go to state 16
    controlBlock  go to state 17
    controlIf     go to state 18
    controlWhile  go to state 19


State 108

    1 program: program . declaration
    2        | program . assignment
    3        | program . controlBlock
    4        | program . DEBUG MISC_LP LIT_STRING MISC_RP MISC_SEMI
   60 controlElif: CTRL_ELIF exprlvl_1 CTRL_THEN program . controlElif

    CONST_DECL   shift, and go to state 3
    VAR          shift, and go to state 4
    TYPE_INT     shift, and go to state 5
    TYPE_CHAR    shift, and go to state 6
    TYPE_BOOL    shift, and go to state 7
    TYPE_FLOAT   shift, and go to state 8
    TYPE_STRING  shift, and go to state 9
    CTRL_IF      shift, and go to state 10
    CTRL_ELIF    shift, and go to state 96
    CTRL_WHILE   shift, and go to state 11
    CTRL_DO      shift, and go to state 12
    DEBUG        shift, and go to state 13

    $default  reduce using rule 61 (controlElif)

    declaration   go to state 14
    assignment    go to state 15
    type          go to state 16
    controlBlock  go to state 17
    controlIf     go to state 18
    controlElif   go to state 110
    controlWhile  go to state 19


State 109

   59 controlIf: CTRL_IF exprlvl_1 CTRL_THEN program controlElif CTRL_ELSE program CTRL_END .

    $default  reduce using rule 59 (controlIf)


State 110

   60 controlElif: CTRL_ELIF exprlvl_1 CTRL_THEN program controlElif .

    $default  reduce using rule 60 (controlElif)
